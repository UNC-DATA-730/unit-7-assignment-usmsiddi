{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "2408880c-10ee-46da-9cf5-085fe0fe8f45",
   "metadata": {},
   "source": [
    "## Background\n",
    "\n",
    "For this exercise. We will use some data from the [general social\n",
    "survey](http://gss.norc.org/), an annual personal-interview survey\n",
    "conducted in the United States. The survey is designed to monitor\n",
    "changes in both social characteristics and attitudes.\n",
    "\n",
    "For this exercise, the **population** of interest will be **ALL** 2538\n",
    "individuals living in a single neighborhood in 2014.\n",
    "\n",
    "If you get stuck as you are working through this Problem Set, it will\n",
    "likely be helpful to review [Chapter 7 in ModernDive](https://moderndive.com/7-sampling.html), \n",
    "in particular subsections 7.3.1 on “Terminology & notation” and 7.3.2 on “Statistical\n",
    "definitions”. The terminology, notation, and definitions related to\n",
    "sampling are definitely tricky at first; the best method to master them\n",
    "is practice, practice, practice.\n",
    "\n",
    "### Key Symbols:\n",
    "\n",
    "| Symbol          | Population Parameter | Point Estimate |\n",
    "|-----------------|----------------------|----------------|\n",
    "| Number of cases | $N$                  | $n$            |\n",
    "| Proportion      | $p$                  | $\\hat{p}$      |\n",
    "| Standard error  | $SE$                 | $\\widehat{SE}$ |"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "112046bc-8538-4ed8-ad37-8f5d64b91839",
   "metadata": {},
   "source": [
    "## Setup\n",
    "\n",
    "First load the necessary packages:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "19c1994f-bf82-4302-aec8-10268e46a287",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "Attaching package: ‘dplyr’\n",
      "\n",
      "\n",
      "The following objects are masked from ‘package:stats’:\n",
      "\n",
      "    filter, lag\n",
      "\n",
      "\n",
      "The following objects are masked from ‘package:base’:\n",
      "\n",
      "    intersect, setdiff, setequal, union\n",
      "\n",
      "\n",
      "Warning message:\n",
      "“Your system is mis-configured: ‘/var/db/timezone/localtime’ is not a symlink”\n",
      "Warning message:\n",
      "“‘/var/db/timezone/localtime’ is not identical to any known timezone file”\n"
     ]
    }
   ],
   "source": [
    "library(ggplot2)\n",
    "library(dplyr)\n",
    "library(forcats)\n",
    "library(moderndive)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dacf7cae-815e-4f6b-8fcf-fafa31f87841",
   "metadata": {},
   "source": [
    "The GSS data we will be working with is in the `gss_cat` data frame,\n",
    "which comes built-in with the `forcats` package you just loaded. You can\n",
    "take a `glimpse()` of the `gss_cat` data set like so:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1f12d1ea-7e2f-4ee0-a5fd-ad15d894b923",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Rows: 21,483\n",
      "Columns: 9\n",
      "$ year    \u001b[3m\u001b[90m<int>\u001b[39m\u001b[23m 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 20…\n",
      "$ marital \u001b[3m\u001b[90m<fct>\u001b[39m\u001b[23m Never married, Divorced, Widowed, Never married, Divorced, Mar…\n",
      "$ age     \u001b[3m\u001b[90m<int>\u001b[39m\u001b[23m 26, 48, 67, 39, 25, 25, 36, 44, 44, 47, 53, 52, 52, 51, 52, 40…\n",
      "$ race    \u001b[3m\u001b[90m<fct>\u001b[39m\u001b[23m White, White, White, White, White, White, White, White, White,…\n",
      "$ rincome \u001b[3m\u001b[90m<fct>\u001b[39m\u001b[23m $8000 to 9999, $8000 to 9999, Not applicable, Not applicable, …\n",
      "$ partyid \u001b[3m\u001b[90m<fct>\u001b[39m\u001b[23m \"Ind,near rep\", \"Not str republican\", \"Independent\", \"Ind,near…\n",
      "$ relig   \u001b[3m\u001b[90m<fct>\u001b[39m\u001b[23m Protestant, Protestant, Protestant, Orthodox-christian, None, …\n",
      "$ denom   \u001b[3m\u001b[90m<fct>\u001b[39m\u001b[23m \"Southern baptist\", \"Baptist-dk which\", \"No denomination\", \"No…\n",
      "$ tvhours \u001b[3m\u001b[90m<int>\u001b[39m\u001b[23m 12, \u001b[31mNA\u001b[39m, 2, 4, 1, \u001b[31mNA\u001b[39m, 3, \u001b[31mNA\u001b[39m, 0, 3, 2, \u001b[31mNA\u001b[39m, 1, \u001b[31mNA\u001b[39m, 1, 7, \u001b[31mNA\u001b[39m, 3, 3…\n"
     ]
    }
   ],
   "source": [
    "data(gss_cat)\n",
    "glimpse(gss_cat)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19e7ee5c-af09-45bb-b4af-f8ebca8ed895",
   "metadata": {},
   "source": [
    "## Exploratory data wrangling\n",
    "\n",
    "This data set includes many years of data, and many variables. To start,\n",
    "we will restrict our analysis to only 2014, and to only the variable\n",
    "indicating the `marital` status of each respondent."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "7e3b88ec-e45d-4a1e-afd6-d6caf40524a1",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "gss_14 = gss_cat |> \n",
    "  filter(year == 2014) |> \n",
    "  select(marital)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1f087f4-97b6-40b5-9252-20e45ad053fb",
   "metadata": {},
   "source": [
    "The following shows all the unique responses for `marital` status:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a405cd55-892d-4417-a9d3-075157810bde",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"dataframe\">\n",
       "<caption>A tibble: 6 × 1</caption>\n",
       "<thead>\n",
       "\t<tr><th scope=col>marital</th></tr>\n",
       "\t<tr><th scope=col>&lt;fct&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><td>Divorced     </td></tr>\n",
       "\t<tr><td>Married      </td></tr>\n",
       "\t<tr><td>Never married</td></tr>\n",
       "\t<tr><td>Separated    </td></tr>\n",
       "\t<tr><td>Widowed      </td></tr>\n",
       "\t<tr><td>No answer    </td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A tibble: 6 × 1\n",
       "\\begin{tabular}{l}\n",
       " marital\\\\\n",
       " <fct>\\\\\n",
       "\\hline\n",
       "\t Divorced     \\\\\n",
       "\t Married      \\\\\n",
       "\t Never married\\\\\n",
       "\t Separated    \\\\\n",
       "\t Widowed      \\\\\n",
       "\t No answer    \\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A tibble: 6 × 1\n",
       "\n",
       "| marital &lt;fct&gt; |\n",
       "|---|\n",
       "| Divorced      |\n",
       "| Married       |\n",
       "| Never married |\n",
       "| Separated     |\n",
       "| Widowed       |\n",
       "| No answer     |\n",
       "\n"
      ],
      "text/plain": [
       "  marital      \n",
       "1 Divorced     \n",
       "2 Married      \n",
       "3 Never married\n",
       "4 Separated    \n",
       "5 Widowed      \n",
       "6 No answer    "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "gss_14 |>\n",
    "  distinct(marital) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5050ae5d-5524-457b-8bb8-fd3728eb41b5",
   "metadata": {},
   "source": [
    "## Setting a seed for your computer’s Random Number Generator\n",
    "\n",
    "In this problem set, will take some random samples of data using R. In\n",
    "order to make sure R takes the same random sample every time you run\n",
    "your code (so you can reproduce your work), you can do what is called\n",
    "“setting a seed”. Do this in any code chunk where you take a random\n",
    "sample! Otherwise, the answers you write down might accidentally become\n",
    "out of sync with the output of your code when your knit your document!\n",
    "\n",
    "You can control your computer’s random number generator by providing a\n",
    "number to using the `set.seed` function. Any number will do - in the\n",
    "example below, we use 45 as our seed value."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "192bc66f-c823-4407-ab13-ee641760ef6a",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "set.seed(45)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "99e3804b-b39c-4bbc-8a8b-8690bc2987dd",
   "metadata": {},
   "source": [
    "## The true population proportion $p$ of divorced people\n",
    "\n",
    "Again, for this exercise, the **population** of interest will be **ALL**\n",
    "2,538 individuals living in this single neighborhood in 2014. Since we\n",
    "have data on **ALL** 2538 people living in the neighborhood, we can\n",
    "compute the **exact population proportion $p$ of divorced people\n",
    "directly** using **ALL** the data:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "cf8d66d6-215c-4aef-a5e5-7a7468190fcf",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"dataframe\">\n",
       "<caption>A tibble: 1 × 3</caption>\n",
       "<thead>\n",
       "\t<tr><th scope=col>divorced</th><th scope=col>N</th><th scope=col>p</th></tr>\n",
       "\t<tr><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;dbl&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><td>411</td><td>2538</td><td>0.1619385</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A tibble: 1 × 3\n",
       "\\begin{tabular}{lll}\n",
       " divorced & N & p\\\\\n",
       " <int> & <int> & <dbl>\\\\\n",
       "\\hline\n",
       "\t 411 & 2538 & 0.1619385\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A tibble: 1 × 3\n",
       "\n",
       "| divorced &lt;int&gt; | N &lt;int&gt; | p &lt;dbl&gt; |\n",
       "|---|---|---|\n",
       "| 411 | 2538 | 0.1619385 |\n",
       "\n"
      ],
      "text/plain": [
       "  divorced N    p        \n",
       "1 411      2538 0.1619385"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "gss_14 %>% \n",
    "  summarize(divorced = sum(marital == \"Divorced\"), \n",
    "            N = n()) |>\n",
    "  mutate(p = divorced / N)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83ae2108-56bd-412d-85c0-680afab8269c",
   "metadata": {},
   "source": [
    "> Note that we used $N$ (the size of the full population, 2,538 people)\n",
    "> and computed $p$ (not $\\hat{p}$ ). And, no inference from sample to\n",
    "> the population is needed. This is because we’re working with the\n",
    "> **entire population** of interest. We do not need to *estimate* the\n",
    "> true proportion, or infer something about the true population\n",
    "> proportion of divorced people in this neighborhood in 2014, because in\n",
    "> this case, we can compute it directly (just like counting all red\n",
    "> balls in the bowl). Thus, we know that $p$ is exactly 0.16. In other\n",
    "> words, this situation is not a realistic reflection of a real life\n",
    "> problem.\n",
    "\n",
    "For the rest of this problem set, we will be *simulating* the act of\n",
    "sampling from this neighborhood population to understand and study how\n",
    "factors like sample size influence **sampling variation**.\n",
    "\n",
    "## Demo: Sampling 50 people in the neighborhood\n",
    "\n",
    "### Estimating $\\hat{p}$ from a single sample\n",
    "\n",
    "We are first going to use random sampling to **ESTIMATE** the true\n",
    "**population** proportion $p$ of the neighborhood that are divorced with\n",
    "only a **sample** of 50 people.\n",
    "\n",
    "> This will represent a situation of only having the resources to knock\n",
    "> on 50 doors to get responses from people in this neighborhood!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1a5a946e-8495-4267-9c79-bea0088a6143",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"dataframe\">\n",
       "<caption>A grouped_df: 4 × 3</caption>\n",
       "<thead>\n",
       "\t<tr><th scope=col>replicate</th><th scope=col>marital</th><th scope=col>n</th></tr>\n",
       "\t<tr><th scope=col>&lt;int&gt;</th><th scope=col>&lt;fct&gt;</th><th scope=col>&lt;int&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><td>1</td><td>Never married</td><td>13</td></tr>\n",
       "\t<tr><td>1</td><td>Divorced     </td><td> 8</td></tr>\n",
       "\t<tr><td>1</td><td>Widowed      </td><td> 6</td></tr>\n",
       "\t<tr><td>1</td><td>Married      </td><td>23</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A grouped\\_df: 4 × 3\n",
       "\\begin{tabular}{lll}\n",
       " replicate & marital & n\\\\\n",
       " <int> & <fct> & <int>\\\\\n",
       "\\hline\n",
       "\t 1 & Never married & 13\\\\\n",
       "\t 1 & Divorced      &  8\\\\\n",
       "\t 1 & Widowed       &  6\\\\\n",
       "\t 1 & Married       & 23\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A grouped_df: 4 × 3\n",
       "\n",
       "| replicate &lt;int&gt; | marital &lt;fct&gt; | n &lt;int&gt; |\n",
       "|---|---|---|\n",
       "| 1 | Never married | 13 |\n",
       "| 1 | Divorced      |  8 |\n",
       "| 1 | Widowed       |  6 |\n",
       "| 1 | Married       | 23 |\n",
       "\n"
      ],
      "text/plain": [
       "  replicate marital       n \n",
       "1 1         Never married 13\n",
       "2 1         Divorced       8\n",
       "3 1         Widowed        6\n",
       "4 1         Married       23"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "set.seed(42)\n",
    "\n",
    "n50_1rep = gss_14 |> \n",
    "  rep_sample_n(size = 50, reps = 1)\n",
    "\n",
    "n50_1rep |> count(marital)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b77cb8ae-3c4e-43cc-ba6e-c68f9558bb8e",
   "metadata": {},
   "source": [
    "Remember, you can set the seed to whatever value you like.\n",
    "\n",
    "Next, let’s calculate the **sample proportion** $\\hat{p}$ of people who\n",
    "identified as `Divorced` in our sample of 50 people."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "08c79aa8-09ea-4cf9-a5d9-06f96f370589",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"dataframe\">\n",
       "<caption>A tibble: 1 × 4</caption>\n",
       "<thead>\n",
       "\t<tr><th scope=col>replicate</th><th scope=col>divorce_count</th><th scope=col>n</th><th scope=col>p_hat</th></tr>\n",
       "\t<tr><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;dbl&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><td>1</td><td>8</td><td>50</td><td>0.16</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A tibble: 1 × 4\n",
       "\\begin{tabular}{llll}\n",
       " replicate & divorce\\_count & n & p\\_hat\\\\\n",
       " <int> & <int> & <int> & <dbl>\\\\\n",
       "\\hline\n",
       "\t 1 & 8 & 50 & 0.16\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A tibble: 1 × 4\n",
       "\n",
       "| replicate &lt;int&gt; | divorce_count &lt;int&gt; | n &lt;int&gt; | p_hat &lt;dbl&gt; |\n",
       "|---|---|---|---|\n",
       "| 1 | 8 | 50 | 0.16 |\n",
       "\n"
      ],
      "text/plain": [
       "  replicate divorce_count n  p_hat\n",
       "1 1         8             50 0.16 "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "n50_1rep |> \n",
    "  summarize(divorce_count = sum(marital == \"Divorced\"), \n",
    "            n = n()) |> \n",
    "  mutate(p_hat = divorce_count/ n)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "79b01224-843c-4b5c-80d0-204121bb68d9",
   "metadata": {},
   "source": [
    "This sample proportion $\\hat{p}$ is an **ESTIMATE**; it’s our **best\n",
    "guess** of what the **true population** proportion $p$ of `Divorced`\n",
    "people is in this neighborhood, based on a sample of only 50 people. It\n",
    "is reasonably close to the true population proportion $p = 0.16$ we\n",
    "calculated from the full population.\n",
    "\n",
    "# Question 1.a)\n",
    "\n",
    "Modify the code below to take 3 samples of 50 people instead of just 1\n",
    "sample, and then compute an estimate of the proportion of Divorced\n",
    "people in the entire population from each sample individually.\n",
    "\n",
    "(**Hint:** Use `group_by` followed by the same `summarize` code as above.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e4c673b0-bf49-4e23-a77e-bcc3437ef71b",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "set.seed(18)\n",
    "\n",
    "n50_3rep = gss_14 |>\n",
    "  rep_sample_n(size = 50, reps = 3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "73802f52-1e9c-4b34-aff6-a08837f4c0df",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"dataframe\">\n",
       "<caption>A tibble: 3 × 4</caption>\n",
       "<thead>\n",
       "\t<tr><th scope=col>replicate</th><th scope=col>divorce_count</th><th scope=col>n</th><th scope=col>p_hat</th></tr>\n",
       "\t<tr><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;dbl&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><td>1</td><td>6</td><td>50</td><td>0.12</td></tr>\n",
       "\t<tr><td>2</td><td>9</td><td>50</td><td>0.18</td></tr>\n",
       "\t<tr><td>3</td><td>8</td><td>50</td><td>0.16</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A tibble: 3 × 4\n",
       "\\begin{tabular}{llll}\n",
       " replicate & divorce\\_count & n & p\\_hat\\\\\n",
       " <int> & <int> & <int> & <dbl>\\\\\n",
       "\\hline\n",
       "\t 1 & 6 & 50 & 0.12\\\\\n",
       "\t 2 & 9 & 50 & 0.18\\\\\n",
       "\t 3 & 8 & 50 & 0.16\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A tibble: 3 × 4\n",
       "\n",
       "| replicate &lt;int&gt; | divorce_count &lt;int&gt; | n &lt;int&gt; | p_hat &lt;dbl&gt; |\n",
       "|---|---|---|---|\n",
       "| 1 | 6 | 50 | 0.12 |\n",
       "| 2 | 9 | 50 | 0.18 |\n",
       "| 3 | 8 | 50 | 0.16 |\n",
       "\n"
      ],
      "text/plain": [
       "  replicate divorce_count n  p_hat\n",
       "1 1         6             50 0.12 \n",
       "2 2         9             50 0.18 \n",
       "3 3         8             50 0.16 "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "n50_3rep |> \n",
    "    group_by(replicate) |>\n",
    "    summarize(divorce_count = sum(marital == \"Divorced\"), \n",
    "            n = n()) |> \n",
    "    mutate(p_hat = divorce_count/ n)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "879c3a54-fc7b-4792-871c-12859f5da89b",
   "metadata": {},
   "source": [
    "## Question 1.b)\n",
    "\n",
    "How do the $\\hat{p}$ estimates from different samples compare? Why was\n",
    "your estimate different each time?\n",
    "\n",
    "**Answer:**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b7eba92-6617-489a-9590-e83ff8bd1c13",
   "metadata": {},
   "source": [
    "p-hat represents the proportion of divorced from the selected sample of 50. it's different each time because each random sample represents are a differnet selection of 50 couples from the larger population.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c5ee0f8-33d9-46f9-9d53-5e4c420810cf",
   "metadata": {},
   "source": [
    "### Estimating $\\widehat{SE}$ from a single sample\n",
    "\n",
    "Typically we only have the opportunity to collect **one sample** for our\n",
    "study, and so we have to use the amount of variability in our **single\n",
    "sample** as an estimate of the amount of variability we might expect in\n",
    "our results if we had taken a random sample of 50 different people. The\n",
    "$\\widehat{SE}_{\\hat{p}}$ serves as an **ESTIMATE** of **sampling\n",
    "variability** if you only have a **single sample**. The formula for\n",
    "estimating the standard error of $\\hat{p}$ is the following:\n",
    "\n",
    "$$\\widehat{SE}_{\\hat{p}}  \\approx  \\sqrt{\\frac{\\hat{p} \\times (1-\\hat{p})}{n}}$$\n",
    "\n",
    "> Note that we use $n$ to represent the size of the sample and we that\n",
    "> use $\\hat{p}$ to represent the proportion of divorced people because\n",
    "> we are ESTIMATING a proportion based on only a sample. Likewise, the\n",
    "> SE “wears a hat” because we are ESTIMATING the true standard error\n",
    "> based on a sample.\n",
    "\n",
    "The standard error of $\\hat{p}$ can be estimated in R like so:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "3ced8893-9e92-4b29-912d-98977cb0fc0b",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"dataframe\">\n",
       "<caption>A tibble: 1 × 5</caption>\n",
       "<thead>\n",
       "\t<tr><th scope=col>replicate</th><th scope=col>divorce_count</th><th scope=col>n</th><th scope=col>p_hat</th><th scope=col>se_hat</th></tr>\n",
       "\t<tr><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><td>1</td><td>8</td><td>50</td><td>0.16</td><td>0.05184593</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A tibble: 1 × 5\n",
       "\\begin{tabular}{lllll}\n",
       " replicate & divorce\\_count & n & p\\_hat & se\\_hat\\\\\n",
       " <int> & <int> & <int> & <dbl> & <dbl>\\\\\n",
       "\\hline\n",
       "\t 1 & 8 & 50 & 0.16 & 0.05184593\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A tibble: 1 × 5\n",
       "\n",
       "| replicate &lt;int&gt; | divorce_count &lt;int&gt; | n &lt;int&gt; | p_hat &lt;dbl&gt; | se_hat &lt;dbl&gt; |\n",
       "|---|---|---|---|---|\n",
       "| 1 | 8 | 50 | 0.16 | 0.05184593 |\n",
       "\n"
      ],
      "text/plain": [
       "  replicate divorce_count n  p_hat se_hat    \n",
       "1 1         8             50 0.16  0.05184593"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "n50_1rep |> \n",
    "  summarize(divorce_count = sum(marital == \"Divorced\"), \n",
    "            n = n()) |> \n",
    "  mutate(p_hat = divorce_count/ n, \n",
    "         se_hat = sqrt(p_hat * (1 - p_hat) / n))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3f73f9bc-6f2d-4f72-b30c-38112ffcddd4",
   "metadata": {},
   "source": [
    "## Demo: Generating a sampling distribution of $\\hat{p}$\n",
    "\n",
    "If you ran the code chunk that takes a random sample of 50 people a\n",
    "thousand more times, and wrote down every $\\hat{p}$ you got, you would\n",
    "have constructed a “sampling distribution” of the proportion of divorced\n",
    "people.\n",
    "\n",
    "> A sampling distribution shows every (or nearly every!) possible value\n",
    "> a point estimate can take on, along with how likely each value is to\n",
    "> be observed, for samples **of a given size** from a population.\n",
    "\n",
    "### Sampling distribution of $\\hat{p}$ for n = 50\n",
    "\n",
    "Instead of running the sampling code chunk for n = 50 over and over, we\n",
    "can “collect” 1000 samples of n = 50 really easily in R. The following\n",
    "code chunk takes 1000 **different** samples of n = 50 and stores them in\n",
    "the data frame `n50_1000rep`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "944330fb-e6f8-4675-b57d-c9089dbab2ff",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "set.seed(19)\n",
    "\n",
    "n50_1000rep = gss_14 |> \n",
    "  rep_sample_n(size = 50, reps = 1000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "dd03aafa-6690-4cfc-a64d-9828e6052c63",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Rows: 50,000\n",
      "Columns: 2\n",
      "Groups: replicate [1,000]\n",
      "$ replicate \u001b[3m\u001b[90m<int>\u001b[39m\u001b[23m 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n",
      "$ marital   \u001b[3m\u001b[90m<fct>\u001b[39m\u001b[23m Divorced, Never married, Never married, Widowed, Married, Wi…\n"
     ]
    }
   ],
   "source": [
    "glimpse(n50_1000rep)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1f1bdd3-4ce5-43df-8b1c-ab8f3b8e014a",
   "metadata": {},
   "source": [
    "Be sure to look at `n50_rep1000` using `glimpse` to get a sense of\n",
    "these 1000 samples look like.\n",
    "\n",
    "## Question 2.a)\n",
    "\n",
    "What is the name of the column in the `n50_1000rep` data frame that\n",
    "identifies which of the 1000 samples an observation belongs to?\n",
    "\n",
    "**Answer:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "830fa2c1-4d4c-4efc-80d4-92ce9574771e",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "replicate columns tells us the iteration of sample each observation is a part of\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8888c021-c788-40ee-87cd-c7a5eca8a43c",
   "metadata": {},
   "source": [
    "## Question 2.b)\n",
    "\n",
    "What is the sample size n for each of the 1000 samples we took?\n",
    "(i.e. how many people are sampled each time)?\n",
    "\n",
    "**Answer:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ce21e9dd-32a5-48c8-87b7-a6b6de3b7cbe",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "sameple size is 50.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a3bf2518-3037-46fe-a82a-1757c6c0fef3",
   "metadata": {},
   "source": [
    "The following code chunk calculates the sample proportion $\\hat{p}$ of\n",
    "people who reported they were divorced for each of the **1000 samples**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "65d434d3-0332-45cf-a292-9171bca61da2",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "p_hat_n50_1000rep = n50_1000rep |> \n",
    "  group_by(replicate) |> \n",
    "  summarize(divorce_count = sum(marital == \"Divorced\"), \n",
    "            n = n()) |> \n",
    "  mutate(p_hat = divorce_count / n)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c435150-f6a2-42de-b453-2b21e3dcdf19",
   "metadata": {},
   "source": [
    "Take a look at the first five rows of the results:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "6e468de8-74d5-4496-9161-5b9ba022bf25",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"dataframe\">\n",
       "<caption>A tibble: 5 × 4</caption>\n",
       "<thead>\n",
       "\t<tr><th scope=col>replicate</th><th scope=col>divorce_count</th><th scope=col>n</th><th scope=col>p_hat</th></tr>\n",
       "\t<tr><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;dbl&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><td>1</td><td> 4</td><td>50</td><td>0.08</td></tr>\n",
       "\t<tr><td>2</td><td> 5</td><td>50</td><td>0.10</td></tr>\n",
       "\t<tr><td>3</td><td> 8</td><td>50</td><td>0.16</td></tr>\n",
       "\t<tr><td>4</td><td> 9</td><td>50</td><td>0.18</td></tr>\n",
       "\t<tr><td>5</td><td>10</td><td>50</td><td>0.20</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A tibble: 5 × 4\n",
       "\\begin{tabular}{llll}\n",
       " replicate & divorce\\_count & n & p\\_hat\\\\\n",
       " <int> & <int> & <int> & <dbl>\\\\\n",
       "\\hline\n",
       "\t 1 &  4 & 50 & 0.08\\\\\n",
       "\t 2 &  5 & 50 & 0.10\\\\\n",
       "\t 3 &  8 & 50 & 0.16\\\\\n",
       "\t 4 &  9 & 50 & 0.18\\\\\n",
       "\t 5 & 10 & 50 & 0.20\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A tibble: 5 × 4\n",
       "\n",
       "| replicate &lt;int&gt; | divorce_count &lt;int&gt; | n &lt;int&gt; | p_hat &lt;dbl&gt; |\n",
       "|---|---|---|---|\n",
       "| 1 |  4 | 50 | 0.08 |\n",
       "| 2 |  5 | 50 | 0.10 |\n",
       "| 3 |  8 | 50 | 0.16 |\n",
       "| 4 |  9 | 50 | 0.18 |\n",
       "| 5 | 10 | 50 | 0.20 |\n",
       "\n"
      ],
      "text/plain": [
       "  replicate divorce_count n  p_hat\n",
       "1 1          4            50 0.08 \n",
       "2 2          5            50 0.10 \n",
       "3 3          8            50 0.16 \n",
       "4 4          9            50 0.18 \n",
       "5 5         10            50 0.20 "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "p_hat_n50_1000rep |>\n",
    "  head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ff7f2c5-4920-4d9a-9ef9-5ed064ef5ff4",
   "metadata": {},
   "source": [
    "### Visualizing the sampling distribution of $\\hat{p}$ for n = 50\n",
    "\n",
    "We can plot the **sampling distribution** of these 1000 $\\hat{p}$\n",
    "estimates of divorced respondents with a histogram, like so:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "dfd8e7c8-b452-4341-be16-c959246e6d92",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA0gAAANICAIAAAByhViMAAAACXBIWXMAABJ0AAASdAHeZh94\nAAAgAElEQVR4nOzdeXxU9b0//s9MSAhLQgggGBYRZKkaFak7XmytFPe22roVbGvV0t7W9qJ1\nqddqW62tve3t97ZW8bpUva21IrW2atW6o7aI2rqBLIrsCAkBQoCQzO+P+d18800gmQQyk3x4\nPv/gMTnnzLzf5zPnzLyYOedMIpVKBQAAur5krhsAAGD3EOwAACIh2AEAREKwAwCIhGAHABAJ\nwQ4AIBKCHQBAJAQ7AIBIdMt1A7tNTU3NzJkzn3322eXLl4cQBg4cOGzYsGOPPfboo4/u2bNn\nrrvbqdNPP72qqurRRx/t0aPHzqbkVl1d3fHHH19QUPD44483TMxak80LHXfccXl5eX/96187\ntG4LDXQ2H3zwwa233vrGG29s3LgxlUrdeeed++67bwfVyvLgd8IG2mqHuw8hhBtvvPGxxx5r\nPn3AgAG///3vm0+fN2/eXXfd9fbbb4cQDjjggC984Qtjxozp8C6hK0pF4ZVXXtlnn30aViov\nL6/h9lFHHZXr7lrSr1+/EEL6LXlnU3KrtrY2hNC9e/fGE9vR5OTJkydOnLh169Y2VW9eKP38\ntulBdqW3zvZ0NLFmzZq99torhNC3b98xY8aMGTPm3Xff7bhyu33w27pVdMSz36F2uPuQSqXO\nP//8Hb4lDR48uPnCM2bMKCgoCCHk5+enbxQUFNxxxx3Zbxs6vxg+sauqqjr55JNXr1798Y9/\n/Jprrhk3blxxcfG6devmzJnzxz/+cfHixblusG1OOumkDRs2dOvWqZ+adjT5/PPPV1dX19fX\nd3Shdmiht07+dNxzzz1r1qw577zz7r777mSy6x1Z0b6tgmjccccd55xzTuMpiUSiyTKzZ8/+\nyle+0q1bt9tvv33q1KkhhF//+tfTpk278MIL999//yOOOCJ77UJX0Enfrtpk5syZq1evHj58\n+J///OfCwsL0xH79+k2ePHny5Mld7j3j7rvvznULrctakzkfjZw30LKFCxeGEP7lX/6lK6Y6\nyM/Pb3jR3pmrr766vr7+yiuv/NKXvpSecsEFFyxevPiGG27493//d99xQxMxBLtFixaFEMaP\nH7/DF4gmb3ibNm168sknn3vuuaVLl1ZVVQ0YMGDChAlTpkzp3bt348UaDuV55513/vu//3ve\nvHm9e/c+6aSTPv/5z6e/5509e/Y999yzZMmS0tLSc8899+STT97h3d98883bb799/vz5PXr0\nmDhx4oUXXtjqoVotHFX23nvvzZgx44033kgmk0ceeeS0adP69u3b5O4bN26cMWPGCy+8sG3b\ntjFjxnz5y18eM2ZM5kf5VFdXz5gx4/nnn9+6deuYMWMuuOCCHR7I0rzJ+vr6WbNmPfnkk0uX\nLk0kEv369SsvLz/xxBP333//P/7xjz/96U9rampCCJMmTWp4Rh588MHS0tLGK7hgwYI77rjj\nrbfe2rhx41/+8peCgoIWDnFreWxXrVp19tlnDxs2rEky27Zt26RJk3r06PHoo4+GEFrtbYcN\n1NXV3X///Y8//viKFSt69ux5yCGHnH/++cOHD29cqE3P2g61XOWuu+6666675s+fH0L4j//4\nj9/85jchhBNOOOE73/nOzh5wVzbLJlpdqVZ3tFZHvmWtrkKGe3oL223jxV588cWZM2cuWLCg\ntrZ2xIgRn/3sZ4877rjmXWW4++xMFrarXd8ss2zVqlXPPvtsIpH46le/2nj6V7/61RtuuOGp\np5768MMPBwwYkKv2oDPK9XfBu8FPfvKTEMK+++67efPmVhc+7LDD0ives2fPPn36pG8PHTr0\n7bffbrxYCCEvL++BBx7o3r17CCH9bwjh7LPPTqVSV111VQghmUzm5+enp//4xz9ufve77747\nPz+/Z8+eQ4YMScfB0aNHf/DBB42XzOQYu/SjPfzww7169QohNOTXfffdd9WqVY0fbeHChelj\nDbt16zZ06NAePXoUFBSk3/IzOcpn8eLFI0aMaHL3e++9t/ndmzRZWVl56KGHhhASicSAAQMG\nDRqUfp+eOHFiKpV66KGHJk6cmJ5y7LHHTvxf69atazLa6VVLL1ldXd3CaLQ6tu+9914IYcyY\nMU3WMZ0kevXqlf6z1d6aN7Bs2bJDDjkk/RT0798/vW0UFBTcdtttjQtl/qztUKtV7rzzzokT\nJw4aNCi97um2f/CDH7TwmJlvli0/QiYr1eqO1urI7+IqZLKnt7zdpm3evLnhu8KCgoKGXDh1\n6tTt27c3rpj57rND2dmudvHuu1H6GLvp06f/+Mc/vuaaa37xi1+89tprzRf7wx/+sMMdOZVK\njRw5MoTw5z//ueObha4khmC3cOHCdMAaN27cjBkz5s+fX19fv7OFL7/88vvuu2/t2rXpP5cv\nX37xxReHEA4++ODGi6Vf6/v06XP99ddXVFTU1dU99dRT6Q8SvvjFL5aUlPzP//xPdXX11q1b\nZ8yYkUgkCgoKVq5c2eTuhYWFP/rRj9IHhq9ateqUU04JIRx55JGN28sw2CUSieLi4u985ztr\n1qxJpVLvvPPOwQcfHEL4yle+0rDY9u3b028MZ5111ocffphKpbZs2XLDDTekTwpu9a1l+/bt\n6Te5M888M12lpqbm2muvTX8Q0nKwu/rqq0MIp5xyyvLly9NTamtrn3vuuV/96lcNd0m/kdTU\n1DQvnV7B3r17X3nllStXrqyvr1+wYEH6XXNno9Hq2GYY7FrtrUkDdXV1hx9+ePq9f+HChelB\n/vnPf56Xl5dIJJ566qkmfbb6rO1Q5lUuuOCCEEKT9/6dyXyzbPkRMlmpDHe0FkZ+F1chkwYy\n2W7PO++8EMIRRxzx0ksv1dXV1dfXz5kz58ADDwwhfO9732tYrE27T3PZ2a52/e7XXHPNxMyk\nH7wFOzx5YuLEie+9917jxW666aYQwkknndT8EU444YQQwn/+53+22jbsUWIIdqlU6r777mv8\nDUtRUdHHPvaxG2+8cfXq1ZncfcKECSGEv/3tbw1T0o9z6aWXNl7s2muvTU+/7777Gk+fPHly\nCOH2229vcvdzzz238WKbNm3q379/COHRRx9tmJhhsAshXHLJJY0f7cUXXwwhDBo0qGHKrFmz\nQghDhw7dtm1b4yXPOOOMTN5aHnrooRDCkCFDmpyieNppp7Ua7E4//fQQwjPPPNPC47cc7EII\nU6dObT5rZ6PR6th2ULD74x//GEIoKSmprKxsvNi3vvWtEMIxxxzTpM9Wn7UdyrxKW4Ndhptl\ny4/QvpVK7WhHa0ew25VVaNJAq9vt3/72txDCsGHDmjwRixYt6tGjR3FxcUPnbdp9msvOdrXr\nd0+/mGRi6dKlLT/UV7/61c997nO33HLLn/70p9/+9rff/va306/hQ4cObfzZYfrQgnPOOaf5\nI5x55pkhhOuuu67VtmGPEkmwS6VSH3744U9+8pNPfOITDV+7hBB69+7dJISl1dTUvPHGG88/\n//zTTz/99NNPn3XWWSGEW265pWGB9N3nz5/f+F4PP/xwCKG4uLjJo11zzTUhhKuuuqrJ3WfP\nnt1kycsuuyyE8PWvf71hSubBbt68eY0fqq6uLn2qZsMX0OkPJBp/ipD21FNPZfLWkr5781fJ\nJ598svndmzT5b//2b+kX34qKip09fqvBbs6cOc1n7Ww0Wh3bDgp26VH6t3/7tyaLLVu2LISQ\nSCQa3pgzfNZ2KPMq7Qh2mWyWLT9C5ivV6o7WvmCX+Sq03ECr2+306dNDCFdccUXzWelj7F54\n4YX0n23afZrLzna163fvUEuXLk1fgnHatGkNEy+//PIQwpQpU5ovf/bZZ4cQrr766iz2CF1A\nDCdPpPXv33/69OnTp09PpVILFiz4y1/+8pOf/OSDDz74/Oc/P3bs2PR3DSGEd99999vf/vYj\njzySvr5UYxUVFY3/TCQS6SNmGpcIITSZGEJIH7q7efPmJtPHjh3bZEr6SOr0mYxt0ryZZDJZ\nWlq6Zs2azZs3p7/uST/s6NGjm9x31KhRmZRI331nPbds+vTpv/3tb3/7298+8MADhx9++OGH\nH/6xj31s0qRJDccmZqJ55y3YjWPbJukzdT7ykY80mT548ODi4uINGzYsXrw4/ZVcyOxZ2/Uq\nbdXq0N18882NN+a+ffum42NahiuV+Y7WEauQYQOtbrdvvvlmCOEPf/jDSy+91ORB5s2bF0JY\nsWJF+s9d2X1Ctrar3XL3jjNkyJDrr7/+3HPPnTlz5s0335yemD6SJP3/sSYa/pOWzSah84sn\n2DVIJBKjR48ePXr0lClTysvLly1bdvvtt/+f//N/QggrVqw4+uij161bd+aZZ06aNGnw4ME9\nevRIJBJ33HHHPffcU1dX1/hxksnkDq9etrOwkvrf/w03aHL+XQihqKgohLBly5a2rlTjEzUa\npC/41FB369atIYTi4uImizX+CLMF6bunO2ys+QM2V1ZW9uabb952222PPPLInDlzZs+e/bOf\n/WzgwIG33Xbbqaeemkn1vLy8TAo12I1j2ybpx99hq3369NmwYUPjBjJ51na9Slu1OnTXXHPN\nunXrGuaOHDmycbDLZKXatKN1xCpk2ECr2211dXUIYYevA2PHjh07dmxJSUn6z13ZfUK2tqtd\nv/t9992XDrut+va3v92mPTrtqKOOCiGsWbOmuro6ndjKyspCowDdWHri3nvv3dYqELcIg12D\nkpKSk08++dZbb03/bziEcOutt65bt+7iiy++5ZZbGi955513dkQDy5Yta/I/46VLl4b//eRv\nt0t/aZj+7qZ50Valu2q+8AcffJDJ3UtLSy+//PLLL7+8trZ2zpw5d91112233XbOOee8++67\n6Zfm3avVsU2/GaffbhtbtWrVrtRNP37zMdm+fXv6bWa3XHmhQ6u0OnQPPfRQ40+52vERTkfv\naK2uQuYNtLzdpsf5i1/8YvpL2xbs4u6Tne1q1z3wwAMzZ87MZMmvfOUr7Qh2DZ/MNUTP8vLy\nEMJbb71VX1/f+NpV27dvf+edd0II6RNZgAaRX9Q0/R/uhteXBQsWhBAmTpzYeJlt27Y9//zz\nHVH9iSeeaDIlfcBN+vS33S59fYd0icYy/GHNdFfNe24+pWX5+flHH330jBkzjjvuuOrq6vRx\n2eF/f+dtd10vutWxLS0tTSQSK1asaPJN3OzZs5s/Wua9pR//kUceaTL98ccfr6urKy0t3W+/\n/TJdhxxVaXXojjnmmOMaaceV/TPf0dq3VbS6Cu3Y03e43R577LEhhD/96U+ttrSLu092tqtd\nd9111z2dmfYl0fRxzKNGjUr/blgI4aMf/Wj//v2rqqqeeeaZxkv+9a9/3bRp06BBg8aNG7fL\nqwVxyeHxfbvLXXfd9Ytf/KKqqqrJ9GeeeSb9tWnD+aqXXHJJCOHiiy9uvFj6kgchhO9///sN\nE8OOfpIyfZzNEUcc0WT6f/3Xf4X/90Sz9AMOHz688UW50gGre/fuDddWSLXlOnbNV3zgwIEh\nhPSVTVKp1HvvvdetW7dkMtn4rMMPP/xwyJAhIYPDt5csWZKfn59MJl966aWGiatWrUp/09Hy\nyRN///vfm1wso7a29qCDDgohPPLII+kp6Y9YFixY0Lz0zlaweaFUW8Y2/X/9xpeuWLZsWfo6\nf01OnmihtyYNLF26NP2WM2vWrIZlNm3alD6I87LLLmt1pZo8azuUeZV2nDyRydC18AiZrFTm\nO1oLI78rq5BhA61ut5WVlenL9t54441Nlqyvr3/55Zcb/mzT7tNcdrarXb/77rJgwYJ//OMf\nTSbOmjUrfUTdDTfc0Hh6+on76Ec/mr62ZSqVqq6uTuc5p8RCczF8Fbt06dJ///d/v/TSS489\n9thDDjmkb9++69ate+WVV5599tkQwsSJE9M/LxhCmDp16i9/+cv01zQf//jH6+rqHn744aee\neupjH/vY008/vXu7ysvLGzx48Lhx4y666KK99977tddeu+2220IIN954Y0d8NRlCGD58+LXX\nXnv11Vd//OMfv+iii8rLy5cvXz5jxoxRo0YtW7Ys/dFIC4YNG/a9733vyiuvPP744xvufsst\nt4waNWrlypUt3/fCCy+sqKiYPHlyeXl5UVHRmjVrZs6c+c9//vOAAw44/vjj08scd9xxixcv\nPv/8888777z0Z6hnnnlmq78mtEMZju03v/nNCy644Gtf+9pLL720//77v//++/fdd9+ECROW\nLFnS5AEz723IkCE//elP//Vf//Wzn/3slClTjjjiiHXr1t15550LFy4sLy9Pnx+96zquSnY2\ny8x3tHZsFZmsQoYNtLrdlpSU/O53v/vUpz51xRVX3H///Z/85CeHDRtWUVGxZMmSxx57bOvW\nrQ3f7O/K7hOytV11HvPmzTv11FM/8pGP7L///kOHDq2urn7ttddeeeWVEMLHPvaxJl98X3HF\nFQ8//PArr7wyfvz4c889N4TwP//zP/Pnzx8/fvyll16amxWAzizXyXI3ePvtty+77LKDDjqo\nya9HDx8+/Pvf/36TKyn8+c9/Tp9RnzZ69OjHH3/8u9/9btjdn9jl5eWlj91uOC6kf//+t956\na5P77sZP7NJ+9rOfNfw0ULdu3c4777x33303hFBWVtbCGDZel4YfdMrLy0tf6zi09ondd7/7\n3SbnA/bu3ftrX/ta44uULl++PH1kdIOGSzrvbAVbGI1MxjaVSjVcnzm9Cl//+tcrKytDs0/s\nWuiteQOpVOr3v/9943N4CwsLv/zlLze5AlmbnrUdyqRKWz+xy3zoWniETFYqwx2thZHfxVXI\npIFMtttUKvXWW299+tOfbvhyMISQSCQ++tGP3nTTTU2KZrj77EwWtqtd3yx3i3/84x9HH310\n4yENIQwbNuyHP/xhk8twpq1du/bzn/98w4F3BQUFU6dObflHSmCPlUhlcBZVV1FTU7NixYrV\nq1fn5+cPHTo0/WtLzdXX13/wwQerVq0aOHBg+qX//ffff//99/fdd9/093QhhGeeeSaRSDQ5\nRmfDhg2vvvpqcXFxkytNLF++fMGCBUOGDGk4DiaRSOTl5W3fvj2EsHbt2sWLFxcWFu6///7N\nT6+bPXt2bW3tscce2/CJWvMpO2wmhPDiiy9u27btmGOOaXKO27Zt295+++1t27btt99+paWl\nTzzxxKRJk0444YQMfy27trb27bff3rp168iRI/v165dKpZ599tlkMvkv//IvLbQdQqiqqlq+\nfHlVVdWgQYOGDBnS/My7EMKKFSuWLFmSPqeh4ZV9ZyvY6mi0PLZpNTU16V+RGj16dHFxcX19\n/XPPPZeXl5c+fKrV3na4pmnvv/9++jc9x4wZ0/wMg7Y+azvTcpX58+evXLlyzJgxmZwbmPlm\nuTNtWqlMdrS0HY58qw20ugoZNpDJdhtCqKmpWbBgQfpiyGVlZc3PzE3LZPdpWYduV7trs9wt\ntmzZsnTp0nXr1iUSibKysqFDh7a8fFVV1YIFCxKJxKhRo9pxZgbsIaIKdp1H43fQbKqrq2uS\nP6qrqydOnDh37txbbrklfRFU9li52iwByBrBrkPk6h105syZ3/ve90488cThw4fn5eUtWrTo\n7rvvXrly5WGHHfbCCy+08EEIewLBDiB6MZw8QYPBgwfX1NT86Ec/apjSq1evadOm/ehHP5Lq\nACB6gl2HePrpp5ucyZEdRx555Lvvvrt69eqVK1dWV1eXlJSMHj06mwfN0JnlarMEIGt8FQsA\nEInIf3kCAGDPIdgBAERCsAMAiIRgBwAQCcEOACASgh0AQCQEOwCASAh2AACR6PK/PLF27dpc\nt9B5JZPJ4uLi9evX57qRrqR///61tbVVVVW5bqTLSCQSJSUllZWVuW6kK+nXr19dXZ19s01K\nS0srKipy3UVXUlpamkql7Jtt0iU2s7y8vL59++5srk/sAAAiIdgBAERCsAMAiIRgBwAQCcEO\nACASgh0AQCQEOwCASAh2AACREOwAACIh2AEAREKwAwCIhGAHABAJwQ4AIBKCHQBAJAQ7AIBI\nCHYAAJEQ7AAAIiHYAQBEQrADAIiEYAcAEAnBDgAgEoIdAEAkBDsAgEgIdgAAkRDsAAAiIdgB\nAERCsAMAiIRgBwAQCcEOACASgh0AQCQEOwCASAh2AACR6JbrBoAQQkilUocddlgOGygvL7/z\nzjtz2AAAu06wg04hlUotWbIkmZdXUNQz+9W3rN/Yr1+/7NcFYPcS7KATGXDAyNPv/EH2684Y\n/7nsFwVgt3OMHQBAJAQ7AIBICHYAAJEQ7AAAIiHYAQBEQrADAIiEYAcAEAnBDgAgEoIdAEAk\nBDsAgEgIdgAAkRDsAAAiIdgBAERCsAMAiIRgBwAQCcEOACASgh0AQCQEOwCASAh2AACREOwA\nACIh2AEAREKwAwCIhGAHABAJwQ4AIBKCHQBAJAQ7AIBICHYAAJEQ7AAAIiHYAQBEQrADAIiE\nYAcAEAnBDgAgEoIdAEAkBDsAgEgIdgAAkRDsAAAiIdgBAERCsAMAiIRgBwAQCcEOACASgh0A\nQCQEOwCASAh2AACR6NZxD71ly5b3339/0aJFGzZsOOqoo4YPH94w64UXXli6dGnjhc8+++xE\nIpG+XV1d/fLLL1dWVu69995HHHFEt24d2CQAQDQ6MDPdfPPNs2fPLisrW7Jkyd57790k2M2f\nP3+//fZrfq/ly5dfddVV3bt3HzFixEMPPfT73//+hhtu6NmzZ8f1CQAQhw4Mdl/60pcuueSS\nLVu2nHPOOc3n7r///pdddlnz6bfeemtxcfFNN91UWFi4du3aSy655P777//CF77QcX0CAMSh\nA4+xKykpycvL29nctWvXPvTQQ3/5y18WLlzYMHHjxo3/+Mc/Jk+eXFhYGELo37//hAkTnnvu\nuY5rEgAgGrk5fC2RSFRXV//jH/+orKxctGjRMccc861vfaugoGD58uWpVGrYsGENSw4dOvTR\nRx/dsmVLOuqFEF566aV33303fTuZTH7mM5/JwQp0EYlEIplM9ujRI9eNdDE5GbT6+vosV2yi\n3WudSCQSiYTNrE3sm+1gM2sr+2Y7dIkRazgnYYdyE+y+8Y1vNAzcnDlzrr/++pEjR5555plb\ntmwJIfTq1athyfTtmpqahmD3zDPPzJw5M327oKBgypQpWW29C2o8nmQiLy8v+4PWGYLdrqy1\nzaytdnHA90xGrB0MWlt1/hFr+f0iN8GucRw+7LDDysvLX3vttTPPPDOd3qqrqxvmpm83Xv6c\nc845/vjj07cTiURVVVWWmu6Ckslkz549N23alOtGupI+ffps37698UaYHTkPdnV1de3bmxKJ\nRO/evTdu3LjbW4pYcXFxfX29fbNNiouLN2zYkOsuupLi4uJUKmXfbJMusZklk8mioqKdze0U\nVxJJpVLpG4MHD04kEh988EF5eXl6ytKlS/v379/wcV0IYfjw4Y1PsF27dm0WO+1ikslkKpWq\nra3NdSNdTE4GLefBrt1rnUgkbGbtYNDayoi1VSqVMmht1SVGrIUTGEJOLlC8devWNWvWNPw5\nZ86cN99886CDDgohFBUVHXzwwX/5y1/S38muXbv2hRdeOPbYY7PfJABAl9OBn9j9/e9/f+KJ\nJ+rq6kIIf/zjH2fPnr3vvvuee+65VVVVF1544T777FNaWlpZWfnee+8dccQRn/70p9P3uvji\ni6+66qpvfOMbI0aMeOuttwYMGHDWWWd1XJMAANHowGDXp0+fESNGhBBGjRqVnjJw4MAQwoAB\n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\nXHakbo+/sH9nDHYPPvjgI488UlFRUVZWdvbZZ0+YMCHXHQEAmdpStWll5YaDDjooJ9V77VWa\nk7qdRKcLdrNmzbrnnnsuuuii/fff/9lnn73pppt69eo1bty4XPcFAGSqW2H3nFxz5L2n/579\nop1K5wp29fX1Dz744KRJk0488cQQwtSpU99+++0HHnhAsAOALqSwpOiEm6Znv+5th52d/aKd\nSjLXDfw/VqxYUVVVNX78+IYphx566Lx58+rrO8El/wAAOrdEKpXKdQ//1xtvvPGd73znJz/5\nyejRo9NTnnjiif/6r/+65557+vTpk57ys5/97OGHH07fzs/Pz8KlF9evX19aWprM79a9qFdH\n12oiVV+/Zf3GnJQOqVRN5YZkt7zuxb2zXTqEmooqpbNdOi+vex+lle7Y0olksrCkSOk9o3Si\nsKR4jyq9Zf2GgXsNXLFiRUcXqq+vz8vL29nczvVV7M5SZiKRaLhdWFhYVPT/b6b5+flZ+DAv\nkUgMHz68o6vsUCqVWr6pprB7Yf/ivjkovXFz9+7dB+Sk9IbqPa10CGHZhuqCgoK9lM6W5Rs3\nd+vWbaDS2bJiU01eXl6uSieTyT2t9MrqLYlEIlelQwh7WulQ3HfAgAFZiCUtfyTXuYJdaWlp\nCGH9+vUNUyorK/Pz83v3/r//uZw2bdq0adMa/ly7dm0WGpszZ04Wqux2yWSyuLi48XjSqv79\n+9fW1lZVVeW6kS4jkUiUlJRUVlbmupGupF+/fnV1dfbNNiktLa2oqMh1F11JaWlpKpWyb7bJ\nrm9mWRjwvLy8vn13mlw71zF2ZWVlffr0mTt3bsOUV199dezYsclk5+oTAKAT6lyBKZlMfuYz\nn3n88ccfffTRJUuW3H333e+8886ZZ56Z674AALqAzvVVbAjh05/+dH19/QMPPJC+QPGll17q\nWicAAJnodMEuhHDGGWecccYZue4CAKCL6VxfxQIA0G6CHQBAJAQ7AIBICHYAAJEQ7AAAIiHY\nAQBEQrADAIiEYAcAEAnBDgAgEoIdAEAkBDsAgEgIdgAAkRDsAAAiIdgBAERCsAMAiIRgBwAQ\nCcEOACASgh0AQCQEOwCASAh2AACREOwAACIh2AEAREKwAwCIhGAHABAJwQ4AIBKCHQBAJAQ7\nAIBICHYAAJFIpFKpXPcAncX27duPPPLIcePG3XbbbbnuhZgdc8wx++yzz29+85tcN0LMJk2a\n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\ntac57BAAAAAASUVORK5CYII=",
      "text/plain": [
       "plot without title"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 420,
       "width": 420
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ggplot(p_hat_n50_1000rep, aes(x = p_hat)) +\n",
    "  geom_histogram(binwidth = 0.02, color = \"black\", fill = \"aquamarine3\", boundary=0) +\n",
    "  labs(x = \"Sample proportion of divorced respondents\", \n",
    "       title = \"Sampling distribution of p-hat based on n = 50\") "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "98983a58-e5a7-40cd-ae2d-3afc3ef94f6a",
   "metadata": {},
   "source": [
    "## Question 3\n",
    "\n",
    "Based on the histogram above, what appeared to be a very common (i.e.,\n",
    "likely) value of $\\hat{p}$? What was a very uncommon (i.e., unlikely)\n",
    "value?\n",
    "\n",
    "**Answer:**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d39432e6-9114-429d-a999-9ebe5fae445d",
   "metadata": {},
   "source": [
    "around 15% seems to be hte very common vaue and 35% seems to be the least likey value.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "30b32a95-611e-4c0a-abac-e7b5f7c2b0a5",
   "metadata": {},
   "source": [
    "### Mean and standard error of the sampling distribution of $\\hat{p}$ for n = 50\n",
    "\n",
    "Finally we can estimate the mean of the sampling distribution by\n",
    "calculating the mean of all 1000 $\\hat{p}$ estimates, and the standard\n",
    "error of the sampling distribution by calculating the standard deviation\n",
    "of all 1000 $\\hat{p}$ values like so:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "19445e9f-03d5-4199-9c79-408d9a5e401d",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"dataframe\">\n",
       "<caption>A tibble: 1 × 2</caption>\n",
       "<thead>\n",
       "\t<tr><th scope=col>M_p_hat</th><th scope=col>SE_p_hat</th></tr>\n",
       "\t<tr><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><td>0.16198</td><td>0.052215</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A tibble: 1 × 2\n",
       "\\begin{tabular}{ll}\n",
       " M\\_p\\_hat & SE\\_p\\_hat\\\\\n",
       " <dbl> & <dbl>\\\\\n",
       "\\hline\n",
       "\t 0.16198 & 0.052215\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A tibble: 1 × 2\n",
       "\n",
       "| M_p_hat &lt;dbl&gt; | SE_p_hat &lt;dbl&gt; |\n",
       "|---|---|\n",
       "| 0.16198 | 0.052215 |\n",
       "\n"
      ],
      "text/plain": [
       "  M_p_hat SE_p_hat\n",
       "1 0.16198 0.052215"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "p_hat_n50_1000rep |>\n",
    "  summarize(M_p_hat = mean(p_hat), \n",
    "            SE_p_hat = sd(p_hat))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5dbd5d9f-e5b3-4804-b808-501b9a394605",
   "metadata": {},
   "source": [
    "Basically, we treat the 1000 point estimates of the population\n",
    "proportion just like any other sample of numbers.\n",
    "\n",
    "## Question 4\n",
    "\n",
    "How do the population proportion and standard error estimates computed\n",
    "by taking the mean and standard deviation of the 1000 simulated sample\n",
    "proportions compare to the estimates of $\\hat{p}$ and $\\widehat{SE}$\n",
    "based on your **single** sample of 50 people earlier in this Problem\n",
    "Set?\n",
    "\n",
    "**Answer:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b392c694-50ef-41a3-bfe0-57ac9ecd5276",
   "metadata": {},
   "outputs": [],
   "source": [
    "the 1000 sample estimates are going to be more reliable becuase of repreated samples. the standard deivation will also be smaller showing more accuracy and consistency between samples\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "100c59ee-bda7-47aa-b066-2399a1149af0",
   "metadata": {},
   "source": [
    "## Question 5.a)\n",
    "\n",
    "Use the `rep_sample_n` function to collect 1000 virtual samples of size\n",
    "*n* = 15. **BE SURE TO NAME YOUR SAMPLE SOMETHING NEW, TO ENSURE YOU CAN\n",
    "DISTINGUISH IT FROM THE n = 50 SAMPLE ABOVE!**\n",
    "\n",
    "**Answer:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "99658bf7-f1b4-4ab8-81a8-a95a36edc95b",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "set.seed(910)\n",
    "\n",
    "n15_1000rep = gss_14 |> \n",
    "  rep_sample_n(size = 15, reps = 1000)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a9e423b8-ce6c-4b9d-bcd4-9f099741010e",
   "metadata": {},
   "source": [
    "## Question 5.b)\n",
    "\n",
    "Calculate sample proportion $\\hat{p}$ of people who reported they were\n",
    "`Divorced` for each replicate of your n = 15 sampling\n",
    "\n",
    "**Answer:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "62efafa8-83be-4c82-910f-014b3fe2529c",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "p_hat_n15_1000rep = n15_1000rep |> \n",
    "  group_by(replicate) |> \n",
    "  summarize(divorce_count = sum(marital == \"Divorced\"), \n",
    "            n = n()) |> \n",
    "  mutate(p_hat = divorce_count / n)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "ed101f37-d25f-4242-9e6a-5d9377fdabd3",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"dataframe\">\n",
       "<caption>A tibble: 5 × 4</caption>\n",
       "<thead>\n",
       "\t<tr><th scope=col>replicate</th><th scope=col>divorce_count</th><th scope=col>n</th><th scope=col>p_hat</th></tr>\n",
       "\t<tr><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;dbl&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><td>1</td><td>2</td><td>15</td><td>0.13333333</td></tr>\n",
       "\t<tr><td>2</td><td>2</td><td>15</td><td>0.13333333</td></tr>\n",
       "\t<tr><td>3</td><td>1</td><td>15</td><td>0.06666667</td></tr>\n",
       "\t<tr><td>4</td><td>4</td><td>15</td><td>0.26666667</td></tr>\n",
       "\t<tr><td>5</td><td>2</td><td>15</td><td>0.13333333</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A tibble: 5 × 4\n",
       "\\begin{tabular}{llll}\n",
       " replicate & divorce\\_count & n & p\\_hat\\\\\n",
       " <int> & <int> & <int> & <dbl>\\\\\n",
       "\\hline\n",
       "\t 1 & 2 & 15 & 0.13333333\\\\\n",
       "\t 2 & 2 & 15 & 0.13333333\\\\\n",
       "\t 3 & 1 & 15 & 0.06666667\\\\\n",
       "\t 4 & 4 & 15 & 0.26666667\\\\\n",
       "\t 5 & 2 & 15 & 0.13333333\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A tibble: 5 × 4\n",
       "\n",
       "| replicate &lt;int&gt; | divorce_count &lt;int&gt; | n &lt;int&gt; | p_hat &lt;dbl&gt; |\n",
       "|---|---|---|---|\n",
       "| 1 | 2 | 15 | 0.13333333 |\n",
       "| 2 | 2 | 15 | 0.13333333 |\n",
       "| 3 | 1 | 15 | 0.06666667 |\n",
       "| 4 | 4 | 15 | 0.26666667 |\n",
       "| 5 | 2 | 15 | 0.13333333 |\n",
       "\n"
      ],
      "text/plain": [
       "  replicate divorce_count n  p_hat     \n",
       "1 1         2             15 0.13333333\n",
       "2 2         2             15 0.13333333\n",
       "3 3         1             15 0.06666667\n",
       "4 4         4             15 0.26666667\n",
       "5 5         2             15 0.13333333"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "p_hat_n15_1000rep |>\n",
    "  head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a97a64e-ed20-4f53-98ee-8502ff8cb090",
   "metadata": {},
   "source": [
    "## Question 5.c)\n",
    "\n",
    "Visualize the sampling distribution of $\\hat{p}$ from your n = 15\n",
    "sampling with a histogram\n",
    "\n",
    "**Answer:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "aaabe9ec-1446-48be-ba85-8c0943fd8db5",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA0gAAANICAIAAAByhViMAAAACXBIWXMAABJ0AAASdAHeZh94\nAAAgAElEQVR4nOzdeXycdYH48WdmkkmaJulNS2hLuVpAirYsFStsC6zlEhFhVwWBZXFBfuCL\n1YIiulyKi+LxcmEVimAFXFiuqsixoBxyqW2lcgYKlJ70Tps2TZtrfn88bjabtJNJZyZJv32/\n/+greeaZ7/OdZ56Z+XSuJDKZTAQAwK4v2dcTAACgMIQdAEAghB0AQCCEHQBAIIQdAEAghB0A\nQCCEHQBAIIQdAEAgSvp6AgXT2Nj4wAMPPPPMM8uXL4+iaOTIkWPHjj3qqKOmTp1aUVHR17Pb\noVNOOWXjxo2PPvrogAEDdrSkb7W2th577LHpdPrxxx9vX9hrk+y6oenTp6dSqd/97ndF3W6W\nCfQ3S5YsueWWW1555ZVNmzZlMpmf/exn++yzT5G21cs7vx9OoKe2e/MhiqKWlpZXX3113rx5\n8+bNe+utt9ra2i655JJTTz2165rXX3/9Y4891nX5iBEj7rvvvuLPFHY1mSDMmzdv7733br9Q\nqVSq/eePfOQjfT27bIYNGxZFUfyQvKMlfau5uTmKorKyso4Ld2KSxx9//LRp07Zt29ajrXfd\nUHz99miQfObW366OTlavXr3HHntEUTRkyJAJEyZMmDDhrbfeKt7mCr7ze3pUFOPaL6rt3nzI\nZDIXX3xxpwejG2+8cbtrnnPOOdt98Nprr716ec6wSwjhGbuNGzeedNJJq1atOuaYY6688spJ\nkyZVV1evW7du7ty5v/71r999992+nmDPnHjiifX19SUl/fqq2YlJPvvssw0NDW1tbcXe0E7I\nMrd+fnXceeedq1evPvPMM++4445kctd7Z8XOHRUEoLy8fMqUKZMnTz7ssMNmzZo1d+7c7Ovf\nfvvtn/3sZzsuSSQSxZwg7Kr66cNVjzzwwAOrVq0aN27cww8/XF5eHi8cNmzY8ccff/zxx+9y\njxl33HFHX0+he702yT7fG30+gezefvvtKIr+9m//dlesOnZnN9xwQ/vP999/f7frl5aWtt+9\nA1mEEHbvvPNOFEWHHXbYdm/2nR7wNm/e/Nvf/vb3v//90qVLN27cOGLEiCOPPPKss86qrKzs\nuFr7W3neeOONn/70p7W1tZWVlSeeeOLnPve5+HXe559//s4771y8ePHQoUPPOOOMk046abtn\nf/XVV2+77bY333xzwIAB06ZN++d//udu36qV5V1lixYtmjVr1iuvvJJMJo844ogLL7xwyJAh\nnc6+adOmWbNmPffcc01NTRMmTPj85z8/YcKE3N/l09DQMGvWrGeffXbbtm0TJkw477zzJkyY\nkMsk29ra5syZ89vf/nbp0qWJRGLYsGETJ0484YQTDj744F//+tc/+MEPGhsboyiaMWNG+zXy\n4IMPDh06tOMFXLhw4e233/7aa69t2rTpv//7v9PpdJa3uGXftytXrvzMZz4zduzYTmXW1NQ0\nY8aMAQMGPProo1EUdTu37U6gtbX13nvvffzxx1esWFFRUfGhD33onHPOGTduXMcN9eha267s\nW5k9e/bs2bPffPPNKIq+//3v/+d//mcURR/72Me+/vWv72jAfA7LTrq9UN3e0Lrd89l1exFy\nvKVnOW47rvbCCy888MADCxcubG5u3nffff/+7/9++vTpXWeV481nR3rhuMr/sAT6u75+LbgA\nvve970VRtM8++2zZsqXblQ8//PD4gldUVAwaNCj+ecyYMa+//nrH1aIoSqVS999/f1lZWRRF\n8b9RFH3mM5/JZDJXXHFFFEXJZLK0tDRe/t3vfrfr2e+4447S0tKKiorRo0fHOTh+/PglS5Z0\nXDOX99jFoz300EMDBw6Moqi9X/fZZ5+VK1d2HO3tt9+O32tYUlIyZsyYAQMGpNPp+CE/l3f5\nvPvuu/vuu2+ns991111dz95pknV1dZMnT46iKJFIjBgxYtSoUfHj9LRp0zKZzK9+9atp06bF\nS4466qhp/2PdunWd9nZ80eI1GxoasuyNbvftokWLoiiaMGFCp8sYl8TAgQPjX7udW9cJLFu2\n7EMf+lB8FQwfPjw+NtLp9K233tpxQ7lfa9vV7VZ+9rOfTZs2bdSoUfFlj6f9rW99K8uYuR+W\n2UfI5UJ1e0Prds/neRFyuaVnP25jW7ZsaX8FMJ1Ot3fh2Wef3dLS0nGLud98tqt3jqs8z14k\nxx13XNTde+xmzpz53e9+98orr7zpppteeumlXp4h7EJCCLu33347DqxJkybNmjXrzTffbGtr\n29HKX/3qV++55561a9fGvy5fvvyCCy6IouiDH/xgx9Xi+/pBgwZdd91169evb21tffLJJ+Mn\nEs4999zBgwf/4he/aGho2LZt26xZsxKJRDqdfv/99zudvby8/Dvf+U78xvCVK1d+/OMfj6Lo\niCOO6Di9HMMukUhUV1d//etfX716dSaTeeONNz74wQ9GUfSFL3yhfbWWlpb4geHTn/70mjVr\nMpnM1q1bv/3tb8cfCu72oaWlpSV+kDv99NPjrTQ2Nl599dXxEyHZw+4b3/hGFEUf//jHly9f\nHi9pbm7+/e9//5Of/KT9LPEDSWNjY9dNxxewsrLya1/72vvvv9/W1rZw4cL4UXNHe6PbfZtj\n2HU7t04TaG1tnTJlSvzY//bbb8c7+Uc/+lEqlUokEk8++WSneXZ7rW1X7ls577zzoijq9Ni/\nI7kfltlHyOVC5XhDy7Ln87wIuUwgl+P2zDPPjKLowx/+8Isvvtja2trW1jZ37txDDjkkiqJr\nr722fbUe3Xy66p3jKv+zX3nlldNyEw+eo1zCrpNp06YtWrQo903A7iOEsMtkMvfcc0/HV1iq\nqqqOPvro66+/ftWqVbmc/cgjj4yi6I9//GP7knicSy+9tONqV199dbz8nnvu6bj8+OOPj6Lo\ntttu63T2M844o+NqmzdvHj58eBRFjz76aPvCHMMuiqJLLrmk42gvvPBCFEWjRo1qXzJnzpz4\nOYmmpqaOa5522mm5PLT86le/iqJo9OjRnT6i+IlPfKLbsDvllFOiKHr66aezjJ897OKnQLqe\ntKO90e2+LVLY/frXv46iaPDgwXV1dR1X+9KXvhRF0Uc/+tFO8+z2Wtuu3LfS07DL8bDMPsLO\nXajM9m5oOxF2+VyEThPo9rj94x//GEXR2LFjO10R77zzzoABA6qrq9tn3qObT1e9c1zlf/b4\nziQXS5cu7Xa0dtnD7v/9v//3D//wDzfffPNvfvObu++++ytf+Up8bz9mzJg+fJYR+q1Awi6T\nyaxZs+Z73/ve3/3d37W/7BJFUWVlZacIizU2Nr7yyivPPvvsU0899dRTT33605+Ooujmm29u\nXyE++5tvvtnxXA899FAURdXV1Z1Gu/LKK6MouuKKKzqd/fnnn++05mWXXRZF0Re/+MX2JbmH\nXW1tbcehWltb449qtr8AHT8h0fFZhNiTTz6Zy0NLfPZrrrmm0/Lf/va3Xc/eaZJf/vKXoyj6\n7Gc/u379+h2N323YzZ07t+tJO9ob3e7bIoVdvJe+/OUvd1pt2bJlURQlEon2B+Ycr7Xtyn0r\nOxF2uRyW2UfI/UJ1e0PbubDL/SJkn0C3x+3MmTOjKLr88su7nhS/x+65556Lf+3Rzaer3jmu\n8j97kWQPu66WLl0af1njhRdeWNSJwa4ohA9PxIYPHz5z5syZM2dmMpmFCxf+93//9/e+970l\nS5Z87nOfO/DAA+PXGqIoeuutt77yla888sgj8fdLdbR+/fqOvyYSifgdMx03EUVRp4VRFI0Y\nMSKKoi1btnRafuCBB3ZaEr+TOv4kY490nUwymRw6dOjq1au3bNkSv9wTDzt+/PhO5z3ggANy\n2UR89h3NObuZM2fefffdd9999/333z9lypQpU6YcffTRM2bMaH9vYi66zjyLAu7bHok/qXPQ\nQQd1Wr7XXntVV1fX19e/++678UtyUW7XWv5b6alud92Pf/zjjgfzkCFD4nyM5Xihcr+hFeMi\n5DiBbo/bV199NYqiX/7yly+++GKnQWpra6MoWrFiRfxrPjefqLeOq4KcvT8YPXr0ddddd8YZ\nZzzwwAM//vGP+3o60L+EE3btEonE+PHjx48ff9ZZZ02cOHHZsmW33Xbbv//7v0dRtGLFiqlT\np65bt+7000+fMWPGXnvtNWDAgEQicfvtt995552tra0dx0kmk9v99rIdxUrmf/433K7T5++i\nKKqqqoqiaOvWrT29UB0/qNEu/hqn9u1u27YtiqLq6upOq3V8CjOL+OzxDDvqOmBXNTU1r776\n6q233vrII4/MnTv3+eef/+EPfzhy5Mhbb7315JNPzmXrqVQqlw21K+C+7ZF4/O1OddCgQfX1\n9R0nkMu1lv9WeqrbXXfllVeuW7eu/dT99tuvY9jlcqF6dEMrxkXIcQLdHrcNDQ1RFG33fuDA\nAw888MADBw8eHP+az80n6q3jKv+z33PPPXHsdusrX/lKj27RPfWRj3wkiqLVq1c3NDTEz/sC\nsQDDrt3gwYNPOumkW265Jf7fcBRFt9xyy7p16y644IKbb76545o/+9nPijGBZcuWdfqf8dKl\nS6P/eeav4OIXDePXbrputFvxrLquvGTJklzOPnTo0K9+9atf/epXm5ub586dO3v27FtvvfWz\nn/3sW2+9VVNTk8sIPdLtvo0fjOOH245WrlyZz3bj8bvuk5aWlvjJm/jp2zwVdSvd7rpf/epX\nHZ/l2omncIp9Q+v2IuQ+gezHbbyfzz333PhF2yzyvPn0znGVv/vvv/+BBx7IZc0vfOELRQ27\n+D0VURR1jVTYzQX+pabxf7jb718WLlwYRdG0adM6rtPU1PTss88WY+tPPPFEpyXxG27ij78V\nXPz9DvEmOsrxD2vGs+o6565LsistLZ06deqsWbOmT5/e0NAQvy87+p+/81ao74vudt8OHTo0\nkUisWLGi0ytxzz//fNfRcp9bPP4jjzzSafnjjz/e2to6dOjQ/fffP9fL0Edb6XbXffSjH53e\nwYc//OGebiL3G9rOHRXdXoSduKVv97g96qijoij6zW9+0+2U8rz59M5xlb9rrrnmqdwUu0Tj\ndzwfcMAB6XS6qBuCXU8fvr+vUGbPnn3TTTdt3Lix0/Knn346ftm0/fOql1xySRRFF1xwQcfV\n4q88iKLom9/8ZvvCaHt/kjJ+n82HP/zhTstvvPHG6P9+0CwecNy4cR2/lCsOrLKysvbvVsj0\n5Hvsul7wkSNHRlEUf7NJJpNZtGhRSUlJMpns+KnDNWvWjB49Osrh7duLFy8uLS1NJpMvvvhi\n+8KVK1fuueeeXc/eaZJ/+tOfOn1ZRnNz86GHHhpF0SOPPBIviZ9iWbhwYddN7+gCdt1Qpif7\nduLEiVEUdfzqimXLlsXf89fpwxNZ5tZpAkuXLo0fSObMmdO+zubNm+M3cV522WXdXqhO19p2\n5b6VnfjwRC67LssIuVyo3G9oWfZ8Phchxwl0e9zW1dXFX9t7/fXXd1qzra3tD3/4Q/uvPbr5\ndNU7x1X+Zy+SLB+eWLhw4V/+8pdOC+fMmRN/i9O3v/3tXpkg7EpCeCl26dKl//qv/3rppZce\nddRRH/rQh4YMGbJu3bp58+Y988wzURRNmzbt7LPPjtc8++yz/+M//iN+meaYY45pbW196KGH\nnnzyyaOPPvqpp54q7KxSqdRee+01adKk888/f88993zppZduvfXWKIquv/76Yrw0GUXRuHHj\nrr766m984xvHHHPM+eefP3HixOXLl8+aNeuAAw5YtmxZ/NRIFmPHjr322mu/9rWvHXvsse1n\nv/nmmw844ID3338/+3n/+Z//ef369ccff/zEiROrqqpWr179wAMPvPzyyx/4wAeOPfbYeJ3p\n06e/++6755xzzplnnhk/h3r66afv3N8IynHf/su//Mt555130UUXvfjiiwcffPB77713zz33\nHHnkkYsXL+40YO5zGz169A9+8IOLL7747//+788666wPf/jD69at+9nPfvb2229PnDgx/nx0\n/oq3ld45LHO/oe3EUZHLRchxAt0et4MHD/6v//qvT37yk5dffvm999573HHHjR07dv369YsX\n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\nSURBVLADAAiEsAMACISwAwAIhLADAAiEsAMACISwAwAIhLADAAiEsAMACISwAwAIhLADAAiE\nsAMACISwAwAIhLADAAiEsAMACISwAwAIhLADAAiEsAMACISwAwAIhLADAAiEsAMACISwAwAI\nhLADAAiEsAMACISwAwAIhLADAAiEsAMACISwAwAIhLADAAiEsAMACISwAwAIhLADAAiEsAMA\nCISwAwAIhLADAAiEsAMACISwAwAIhLADAAiEsAMACISwAwAIhLADAAiEsAMACISwAwAIhLAD\nAAiEsAMACISwAwAIhLADAAiEsAMACISwAwAIhLADAAiEsAMACISwAwAIhLADAAiEsAMACISw\nAwAIhLADAAiEsAMACISwAwAIhLADAAiEsAMACISwAwAIhLADAAiEsAMACISwAwAIhLADAAiE\nsAMACISwAwAIhLADAAiEsAMACISwAwAIhLADAAiEsAMACISwAwAIhLADAAiEsAMACISwAwAI\nhLADAAiEsAMACISwAwAIhLADAAiEsAMACISwAwAIhLADAAiEsAMACISwAwAIhLADAAiEsAMA\nCISwAwAIhLADAAiEsAMACISwAwAIhLADAAiEsAMACISwAwAIhLADAAiEsAMACISwAwAIhLAD\nAAiEsAMACISwAwAIhLADAAiEsAMACISwAwAIhLADAAiEsAMACISwAwAIhLADAAiEsAMACISw\nAwAIhLADAAiEsAMACISwAwAIhLADAAhESV9PIF8lJUW/CIlEIv63F7bVt5LJwod+SUlJvAPz\nFM+tIFdBKpXKf5CuY/bDw6NIV2jBxyRHqVQqmUy6CvpQfG+WSqUKcrfGTkgkErvDw3F22e/b\nd/ldM2DAgN7ZUCqV6rVt9ZViFM+AAQMKcg9YUlKSyWQKMsPy8vL8B+mkpKSkHx4eRbpCCz4m\nOUomk8lk0lXQh+LbVHl5eSaT6eu57KYSiYRbQXa7fNht2rSp2JtIJBJlZWUtLS29sK2+1dzc\nXPAxN23aVJCwq6ioaGtr27p1a/5DNTQ05D9IJ9u2beuHh0eRrtCCj0mO0ul0Op3evHlzX09k\n91VVVZVKpRoaGlpbW/t6LrupZDJZXV29m98RpVKpsrKyHZ3qPXYAAIEQdgAAgRB2AACBEHYA\nAIEQdgAAgRB2AACBEHYAAIEQdgAAgRB2AACBEHYAAIHIKez+5V/+Zfbs2V2Xr1+/fvr06QsW\nLCjwpAAA6Lmc/lbsggULBg8e3HV5U1PTM888s3HjxkLPCgCAHsvrpdgNGzZEUVReXl6gyQAA\nsPOyPWO3atWqJ554Iv7h5ZdfvuuuuzqeumXLlvvuuy+VSh1wwAHFnSMAADnIFnZvvPHGWWed\nFf9cW1s7Z86cTiskEonLL7986NChxZodAAA5yxZ2EydOfOihh6Io+trXvjZx4sQzzjij46nl\n5eUHHXTQXnvtVdwJAgCQm2xhN2zYsI9//ONRFK1du3bcuHHTp0/vpUkBANBzOX0q9h//8R+L\nPA0AAPKVU9h1tGnTptbW1o5LKisrS0p6PA4AAIWV69edPPHEE0cddVRlZWV1dfWQ/+u5554r\n6hQBAMhFTs+0Pf3008cff/yQIUNmzJgxYsSIRCLR8dSamprizA0AgB7IKexuu+22Qw455Pnn\nn6+srCz2hAAA2Dk5vRS7atWqM844Q9UBAPRnOYXd2LFj/UFYAIB+LqewO/fcc++66666urpi\nzwYAgJ2W03vsMpnMxIkTJ06ceOGFFx5wwAHpdLrjqUceeeTw4cOLMz0AAHKVU9h94xvfeOaZ\nZ+Ifup761FNP+aMUAAB9Lqewu+aaa9asWbOjUz/wgQ8Ubj4AAOyknMJu2rRpxZ4HAAB5yvUv\nTwAA0M8JOwCAQOQUdieccELljj377LPFniUAAN3K6T12hx12WFlZWfuvmUxm2bJlL7/88ogR\nI6ZMmTJkyJCiTQ8AgFzlFHbf+ta3ui587bXXTjzxxNNOO+2QQw4p9KwAAOixnX+P3Qc+8IFv\nfetbl1xyydatWws4IQAAdk5eH5449NBD6+rqXnvttULNBgCAnZZX2L388stRFCUSiQJNBgCA\nnZfTe+zefPPNTZs2dVzS0NAwb9686667buTIkRMnTizO3AAA6IGcwu6CCy6I/1ZsJ2PGjJk9\ne3ZpaWmhZwUAQI/lFHYXX3zxJz/5yY5LKisrx40bd9RRR3X8GhQAAPpQTmF3+umnF3seAADk\nKaewa9fU1PTOO+80NjbW1NSMGjWqSHMCAGAn5Pqp2I0bN37hC18YPHjwwQcffNhhh+25556H\nHnroww8/XNTJAQCQu5yesdu2bduxxx47f/78Aw444CMf+cigQYPefffdxx9//OSTT7733nu9\nUAsA0B/kFHY///nP58+f/81vfvOKK65IJv/6JN+iRYuOPfbYL33pS6eddpqvsgMA6HM5vRT7\n29/+dtKkSd/4xjfaqy6Kon322eeHP/zhsmXLamtrizY9AABylVPYbdiw4YADDui6PF64YcOG\nAk8KAICeyynsampq5s2b19zc3Gn5Cy+8EJ9a+HkBANBDOYXdpz71qXffffess85auXJl+8Jf\n/vKXM2fOnDRp0t5771206QEAkKucPjzxiU984qyzzrrzzjvnzJmzzz77VFdXv/fee2vWrBk0\naNBPf/rTYk8RAIBc5Po9dj//+c9nz559xBFHrF69+pVXXqmqqrrgggsWLFgwefLkos4PAIAc\n5fqXJxKJxDnnnHPOOecUdTYAAOy0XJ+xAwCgn8sp7B5//PEhQ4a88847nZZ//vOf/9jHPlaE\nWQEA0GM5hd1DDz2077777rfffp2Wn3TSSb/73e/WrVtXhIkBANAzOYXdokWLtvsFxQceeGAm\nk1myZEmhZwUAQI/lFHZtbW319fVdl8cLu35xMQAAvS+nsDvwwAP/+Mc/rl+/vtPyhx9+OJlM\n7r///kWYGAAAPZNT2J155pnr16//9Kc/vXjx4nhJW1vb7bfffv3115944olDhw4t5gwBAMhJ\nTt9jd9hhh1155ZXXXnvt/vvvP27cuMGDB7/zzjt1dXVjx479yU9+UuwpAgCQi1y/oPiaa66Z\nPHnyTTfd9Oc//3n58uVjxoz5p3/6p8svv3z48OFFnR9Ab3rmmWduueWWwo4Z/6+4sGMCbFeu\nYRdF0SmnnHLKKacUbyoAfW758uVPPPFEYcf88pe/XNgBAXakB2EHsJs44ktnj//4tPzHmfvj\ne954oMCZCJCFsAPorLSivHxwVf7jpNKl+Q8CkDt/KxYAIBDCDgAgEMIOACAQwg4AIBDCDgAg\nEMIOACAQwg4AIBDCDgAgEMIOACAQwg4AIBDCDgAgEMIOACAQwg4AIBDCDgAgEMIOACAQwg4A\nIBDCDgAgEMIOACAQwg4AIBDCDgAgEMIOACAQwg4AIBDCDgAgEMIOACAQwg4AIBDCDgAgEMIO\nACAQwg4AIBDCDgAgEMIOACAQwg4AIBDCDgAgEMIOACAQwg4AIBDCDgAgEMIOACAQwg4AIBDC\nDgAgEMIOACAQwg4AIBDCDgAgEMIOACAQwg4AIBDCDgAgEMIOACAQwg4AIBDCDgAgEMIOACAQ\nwg4AIBDCDgAgEMIOACAQwg4AIBDCDgAgEMIOACAQwg4AIBAlxRt64cKFCxYsePfddzdu3PgP\n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\nFOQesKKioq2tbevWrfkP1djYmP8gnTQ1Ne0+V2jBx+xXivEMfWNjY0H2WzqdTqfThboKCvUU\neLvW1tbgD4+40RsbG1tbW/t6LrupZDJZUlIS/JGWXSqVGjBgwI5O9R47AIBACDsAgEAIOwCA\nQAg7AIBACDsAgEAIOwCAQAg7AIBACDsAgEAIOwCAQAg7AIBACDsAgEAIOwCAQAg7AIBACDsA\ngEAIOwCAQAg7AIBACDsAgEAIOwCAQAg7AIBACDsAgEAIOwCAQAg7AIBACDsAgEAIOwCAQAg7\nAIBACDsAgEAIOwCAQAg7AIBACDsAgEAIOwCAQAg7AIBACDsAgEAIOwCAQAg7AIBACDsAgEAI\nOwCAQAg7AIBACDsAgEAIOwCAQAg7AIBACDsAgEAIOwCAQAg7AIBACDsAgEAIOwCAQAg7AIBA\nCDsAgEAIOwCAQAg7AIBACDsAgEAIOwCAQAg7AIBACDsAgEAIOwCAQAg7AIBACDsAgEAIOwCA\nQAg7AIBACDsAgEAIOwCAQAg7AIBACDsAgEAIOwCAQAg7AIBACDsAgEAIOwCAQAg7AIBACDsA\ngEAIOwCAQAg7AIBACDsAgEAIOwCAQAg7AIBACDsAgEAIOwCAQJT09QQAoFh++ctf3nbbbYUa\nLZVKJZPJn/zkJyNHjizUmFBYwg6AYC1fvvwPf/hDYcdsbGws7IBQQMIOgMAd++1L9jnmw/mP\n8/Q1P3n70WfzHweKR9gBELhEKpUsLcDjXSKZyH8QKCofngAACISwAwAIhLADAAiEsAMACISw\nAwAIhLADAAiEsAMACISwAwAIhLADAAiEsAMACISwAwAIhLADAAiEsAMACISwAwAIhLADAAiE\nsAMACISwAwAIhLADAAiEsAMACISwAwAIhLADAAiEsAMACISwAwAIhLADAAiEsAMACISwAwAI\nhLADAAiEsAMACISwAwAIhLADAAiEsAMACERJX08AAOhH1q1bd9tttxV2zGOPPfawww4r7Jhs\nl7ADAP7XmjVrbrjhhsKOOXjwYGHXO4QdANDZ6I98cOIZJ+U/zvvzX18w+5f5j0OOhB0A0NnA\nPYaOmfqh/MfZVt+Q/yDkzocnAAACIewAAAIh7AAAAiHsAAAC4cMTAMDu6LzzznvyyScLOODI\nkSP/8Ic/FHDAndAfw+7BBx985JFH1q9fX1NT85nPfObII4/s6xkBAKFpbGzcvHnzoL33TCQL\n8AJm/ZKVmzdvzn+cPPW7sJszZ86dd955/vnnH3zwwc8888wNN9wwcODASZMm9fW8AIAAnXL7\nt8oHV+U/zn+eeGH+g+Svf73Hrq2t7cEHH5wxY8YJJ5yw9957n3322QcddND999/f1/MCANgF\n9K+wW7FixcaNGzv+1ZHJkyfX1ta2tbX14awAAHYJiUwm09dz+F+vvPLK17/+9e9973vjx4+P\nlzzxxBM33njjnXfeOWjQoHjJD3/4w4ceeij+ubS09LHHHiv2rDZs2DB06NBkaUlZ1cD8R2tr\nadlW31BRUVFZWZn/aFEUHX744XPnzi3IUJs2bWpsbCyrrkyWpPIfbVv95raW1j322CP/oaIo\nqqqq2rRpU0GGam1tXbduXSpdmq6sKMBoTc1Nm7dUVlZWVBRgtCiK/uZv/mbevHkFGWrjxo3b\ntm0rH1xVkLePbN2wKRFFw4cPz3+oKIpqampWrFhRkKGiKDr00ENffvnlggy1devW+vr60ooB\nJeXp/Edr3rK1Zeu2IUOGlJaW5j9aFEWjR49etmxZQYZau3ZtJooK8gpUpq1t64ZNZWVl7XfU\neSrgrWDLli2bN29OV1ak0gW4Cpo2b2ltah42bFgqVYA7ySiKBg8evGHDhoIMNXz48LVr1xZk\nqJaWlvXr1/fbO8nJkyf/+c9/LshQGzZsaGpqKh9SnUgk8h9t64b6USNHLV++PP+hsmtra8ty\nBPav99jtqDI77vHy8vKqqr/eE5WWlvbCk3mJRGLcuHEFHHBL+cDm5uZCHeKlpaWFGmrbtm2D\nBg0qLy8vyGhR9ZD333+/UHMbMGBAa2trQYZqaWkZOHDgiBEjCjJaFEWbyzdnMpl+eIU2NjYO\nGzYsnS5AoERRFFUPWblyZaHmVlZWVqihoihKp9OFGi2TyQwdOrS6urogo0XV0bp16wYMGFCo\na6GA+y2dTo8aNaogQ0VR1FRRtWnTpn54K2htbS0vLy/Uf6Sj6iFr1qwpLy8vVKmXl5cX6pIW\ncKjm5ubKyspC/S8uiqJNZZsSiUQ/PDy2bNkyfPjwAt5J7rHHHr2QJdmfkutfYTd06NAoijr+\n96Wurq60tLTjbfLCCy+88ML/fX9iof6DkkUikVi0aFFTU1N9fX2xt8WOVFRUtLW1bd26ta8n\nsvsaMmRIMplct25dX09k95VOp9PpdH/42N1uq6qqqqysrK6urlD/z6SnkslkdXV1oZ7mLIa6\nurpibyKVSg0ZMmRHp/av99jV1NQMGjRo/vz57Uv+/Oc/H3jggclCvJAEABC2/hVMyWTyU5/6\n1OOPP/7oo48uXrz4jjvueOONN04//fS+nhcAwC6gf70UG0XRqaee2tbWdv/998dfUHzppZf6\nEjsAgFz0u7CLoui000477bTT+noWAAC7mP71UiwAADtN2AEABELYAQAEQtgBAARC2AEABELY\nAQAEQtgBAARC2AEABELYAQAEQtgBAARC2AEABELYAQAEQtgBAARC2AEABELYAQAEQtgBAARC\n2AEABELYAQAEQtgBAARC2AEABELYAQAEQtgBAARC2AEABELYAQAEQtgBAARC2AEABELYAQAE\nQtgBAAQikclk+noO/d2mTZuOPvroqVOn/vu//3tfzwX6zGmnnVZXV/fkk0/29USgz1x11VUP\nP/zwgw8+OHbs2L6eC2yfZ+wAAAIh7AAAAiHsAAACUdLXE9gFpNPpc845Z++99+7riUBfOvXU\nU7ds2dLXs4C+dOSRRw4fPry6urqvJwI75MMTAACB8FIsAEAghB0AQCC8x+5/bdu27aGHHnr9\n9ddLSkoOP/zwv/u7v0skEnmuCbucp59++g9/+MO2bdvGjx9/yimnVFRUdF1n27Zt8+bNW7Bg\nwdq1aysrKydOnHjMMceUlLg/IRC1tbWPPfZYXV1dTU3NySefXFNTk339l1566b777tt///3/\n6Z/+qXdmCDviGbu/ymQyV1111W9+85tDDjlk7733vuWWW26++eY814Rdzh133PGjH/1o1KhR\nH/zgB5966qkrrriipaWl62ovvvjij3/84+bm5oMOOqiiomLWrFnf+ta3vGGXMMyfP//yyy9v\nbm6eMmXKkiVLZs6cuXz58izrr1279kc/+tHatWsXLVrUa5OEHfE/7L964YUXXn/99R/84Af7\n779/FEUjR4688cYbP/GJT+y11147vSbsWtavXz9nzpyzzz771FNPjaLoiCOOuOCCC373u98d\nd9xxndacPHny7NmzS0tL418PPvjg73//++++++5+++3X25OGQrv99tsnT5582WWXRVF03HHH\nXXzxxXffffell1663ZVbW1u/+93vfupTn1qwYEFzc3PvzhS2wzN2fzV//vyampq41aIoOvLI\nIxOJxPz58/NZE3YtCxYsaG1tnTZtWvzrqFGjxo8fP2/evK5rVldXt1ddFEV77rlnFEVtbW29\nM08onjVr1ixdurT9VlBSUjJ16tQs9/CzZ88eNGjQJz7xid6aIHRD2P3VqlWrRowY0f5reXl5\ndXX1qlWr8lkTdi2rV69OpVJDhw5tX7LHHnt0e2xnMpn7779/zJgx++67b5EnCEW3evXqKIr2\n2GOP9iUjRoxoaGjYvHlz15VffPHFF1988ZJLLum9+UF3hN1ftbS0lJWVdVxSVla23XcX5b4m\n7FpaWlrS6XTHJbkc2z/96U/feOONr33ta6lUqpizg94QH/AdbwjxHX7XG8LKlStvuummSy+9\ntLKysjdnCNl5j91fVVVV1dfXd1xSX19fVVWVz5qwa6msrGxsbGxpaWn/fGv2Y7utre2mm25a\nsGDBv/3bv40ePbq3pglFFFdaxzv5+vr6RCIxcODATms+/vjjmUzmF7/4RfzrokWLMpnMv/7r\nv5577rmevaYPCbu/2m+//ebMmbN169by8vIoihYvXtzY2Ljdd4LnvibsWuJ3jtbW1h5yyCFR\nFLW1tb311ltHHnnkdlduamq64YYbFi9efP3113d83Qp2aWPGjEmn07W1tZMmTYqX1NbWjh07\ntuObSmNTpkwZNmxY+691dXWtra1HHHGEPzhG3/JS7F8dffTRLS0td911V1tbW1NT089//vPh\nw4cfdthhURTV1dXdddddS5Ys6XZN2KUdfPDBe+2115133rlly5ZMJnPfffdt3LhxxowZ8an3\n3nvv3Llz45+3bNly9dVXr1y58jvf+Y6qIyTpdHr69P/f3t3HNHW1AQB/aIEKCJRvBlpgxSBU\nREVEHRN1ToaIBs3IGFEhLKABtzAXnRvRZVvGliguw30YdOKWMKIbI87JEDPKlwgMil8wRCYf\nWkCK4BSBtrTvH+fNfe97W24vFUTL8/tLzj33OR88tYf23HtXnz9/vqurCwBkMlltbe1rr71G\njpaVlZ07d478e/78+VE0rq6uzs7OUVFRzs7O09Z7hPATO4q7u/uePXuys7NLSkrUarVQKPzg\ngw/INouBgYHTp0/7+PiIRCL2mgg913g83v79+zMzM+Pj4wUCgUaj2b17t7e3NzlaUFCwZs2a\nkJAQACgtLb1+/bpAINi1axd1elpa2ngf7yH0HElKSlIoFKmpqba2to8e7eEzEAAADuZJREFU\nPYqMjNywYQM5VFlZ2d3dvXHjxuntIUIszPCeonRKpbK9vd3c3Nzb25vH++/HmSMjI62trSKR\n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",
      "text/plain": [
       "plot without title"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 420,
       "width": 420
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ggplot(p_hat_n15_1000rep, aes(x = p_hat)) +\n",
    "  geom_histogram(binwidth = 0.02, color = \"black\", fill = \"aquamarine3\", boundary=0) +\n",
    "  labs(x = \"Sample proportion of divorced respondents\", \n",
    "       title = \"Sampling distribution of p-hat based on n = 15\") "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "46821e96-7c56-4536-bc6e-de130723a53c",
   "metadata": {},
   "source": [
    "## Question 5.d)\n",
    "\n",
    "Calculate the mean of the n = 15 sampling distribution, and the standard\n",
    "error of the n = 15 sampling distribution\n",
    "\n",
    "**Answer:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "624dab5c-564f-4ca2-97b7-919beb4ed01c",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"dataframe\">\n",
       "<caption>A tibble: 1 × 2</caption>\n",
       "<thead>\n",
       "\t<tr><th scope=col>M_p_hat</th><th scope=col>SE_p_hat</th></tr>\n",
       "\t<tr><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><td>0.1615333</td><td>0.09475327</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A tibble: 1 × 2\n",
       "\\begin{tabular}{ll}\n",
       " M\\_p\\_hat & SE\\_p\\_hat\\\\\n",
       " <dbl> & <dbl>\\\\\n",
       "\\hline\n",
       "\t 0.1615333 & 0.09475327\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A tibble: 1 × 2\n",
       "\n",
       "| M_p_hat &lt;dbl&gt; | SE_p_hat &lt;dbl&gt; |\n",
       "|---|---|\n",
       "| 0.1615333 | 0.09475327 |\n",
       "\n"
      ],
      "text/plain": [
       "  M_p_hat   SE_p_hat  \n",
       "1 0.1615333 0.09475327"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "p_hat_n15_1000rep |>\n",
    "  summarize(M_p_hat = mean(p_hat), \n",
    "            SE_p_hat = sd(p_hat))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e347575-c135-4039-ba14-f3ca4e0a48c5",
   "metadata": {},
   "source": [
    "## Question 6.a)\n",
    "\n",
    "How does the standard error of the n= 15 sampling distribution compare\n",
    "to the standard error of the n = 50 sampling distribution?\n",
    "\n",
    "**Answer:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e7e27e3d-194c-4a61-b664-80eb18bf2941",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "the standard error is way larger than it was for n=50. which was .052.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a04060d-2689-4e61-921b-6df469ffc553",
   "metadata": {},
   "source": [
    "## Question 6.b)\n",
    "\n",
    "Explain any observed differences from Question 6a\n",
    "\n",
    "**Answer:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9c2950f4-9fb0-4b75-b4d7-c226373314e0",
   "metadata": {},
   "outputs": [],
   "source": [
    "larger SE is a shows less accuracy and consitenty, however, this could also be less reliable due to the smaller number of samples."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e438be0f-020a-454f-a0df-0faf39f37acc",
   "metadata": {},
   "source": [
    "## Question 7.a)\n",
    "\n",
    "Use the `rep_sample_n` function to collect 1000 virtual samples of size\n",
    "*n* = 600. **Note: BE SURE TO NAME YOUR SAMPLE SOMETHING NEW, TO ENSURE\n",
    "YOU CAN DISTINGUISH IT FROM THE n = 50, and n = 15 SAMPLES ABOVE!**\n",
    "\n",
    "**Answer:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "814c3363-d874-4707-adc1-7b55528016c3",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "set.seed(84)\n",
    "\n",
    "n600_1000rep = gss_14 |> \n",
    "  rep_sample_n(size = 600, reps = 1000)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f9684fc-bb77-4e85-bd9c-168d3cd51fc0",
   "metadata": {},
   "source": [
    "## Question 7.b)\n",
    "\n",
    "Calculate the proportion $\\hat{p}$ of people who reported they were\n",
    "`Divorced`for each replicate of your n = 600 sampling\n",
    "\n",
    "**Answer:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "ddb49bc8-3bab-420b-8a21-5256a7ec886e",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "p_hat_n600_1000rep = n600_1000rep |> \n",
    "  group_by(replicate) |> \n",
    "  summarize(divorce_count = sum(marital == \"Divorced\"), \n",
    "            n = n()) |> \n",
    "  mutate(p_hat = divorce_count / n)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "5a8dc484-743f-422c-aa25-d7d00a85e2af",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"dataframe\">\n",
       "<caption>A tibble: 5 × 4</caption>\n",
       "<thead>\n",
       "\t<tr><th scope=col>replicate</th><th scope=col>divorce_count</th><th scope=col>n</th><th scope=col>p_hat</th></tr>\n",
       "\t<tr><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;dbl&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><td>1</td><td>105</td><td>600</td><td>0.1750000</td></tr>\n",
       "\t<tr><td>2</td><td>100</td><td>600</td><td>0.1666667</td></tr>\n",
       "\t<tr><td>3</td><td>102</td><td>600</td><td>0.1700000</td></tr>\n",
       "\t<tr><td>4</td><td>107</td><td>600</td><td>0.1783333</td></tr>\n",
       "\t<tr><td>5</td><td> 93</td><td>600</td><td>0.1550000</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A tibble: 5 × 4\n",
       "\\begin{tabular}{llll}\n",
       " replicate & divorce\\_count & n & p\\_hat\\\\\n",
       " <int> & <int> & <int> & <dbl>\\\\\n",
       "\\hline\n",
       "\t 1 & 105 & 600 & 0.1750000\\\\\n",
       "\t 2 & 100 & 600 & 0.1666667\\\\\n",
       "\t 3 & 102 & 600 & 0.1700000\\\\\n",
       "\t 4 & 107 & 600 & 0.1783333\\\\\n",
       "\t 5 &  93 & 600 & 0.1550000\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A tibble: 5 × 4\n",
       "\n",
       "| replicate &lt;int&gt; | divorce_count &lt;int&gt; | n &lt;int&gt; | p_hat &lt;dbl&gt; |\n",
       "|---|---|---|---|\n",
       "| 1 | 105 | 600 | 0.1750000 |\n",
       "| 2 | 100 | 600 | 0.1666667 |\n",
       "| 3 | 102 | 600 | 0.1700000 |\n",
       "| 4 | 107 | 600 | 0.1783333 |\n",
       "| 5 |  93 | 600 | 0.1550000 |\n",
       "\n"
      ],
      "text/plain": [
       "  replicate divorce_count n   p_hat    \n",
       "1 1         105           600 0.1750000\n",
       "2 2         100           600 0.1666667\n",
       "3 3         102           600 0.1700000\n",
       "4 4         107           600 0.1783333\n",
       "5 5          93           600 0.1550000"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "p_hat_n600_1000rep |>\n",
    "  head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "99da0668-1519-42ef-b0d3-9241ccab475a",
   "metadata": {},
   "source": [
    "## Question 7.c)\n",
    "\n",
    "Calculate the mean of the n = 600 sampling distribution, and the\n",
    "standard error of the n = 600 sampling distribution.\n",
    "\n",
    "**Answer:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "18c2d935-914a-4d5c-b5c9-ce3be3c13523",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"dataframe\">\n",
       "<caption>A tibble: 1 × 2</caption>\n",
       "<thead>\n",
       "\t<tr><th scope=col>M_p_hat</th><th scope=col>SE_p_hat</th></tr>\n",
       "\t<tr><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><td>0.1622667</td><td>0.01334838</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A tibble: 1 × 2\n",
       "\\begin{tabular}{ll}\n",
       " M\\_p\\_hat & SE\\_p\\_hat\\\\\n",
       " <dbl> & <dbl>\\\\\n",
       "\\hline\n",
       "\t 0.1622667 & 0.01334838\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A tibble: 1 × 2\n",
       "\n",
       "| M_p_hat &lt;dbl&gt; | SE_p_hat &lt;dbl&gt; |\n",
       "|---|---|\n",
       "| 0.1622667 | 0.01334838 |\n",
       "\n"
      ],
      "text/plain": [
       "  M_p_hat   SE_p_hat  \n",
       "1 0.1622667 0.01334838"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "p_hat_n600_1000rep |>\n",
    "  summarize(M_p_hat = mean(p_hat), \n",
    "            SE_p_hat = sd(p_hat))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7064d4fc-3cf9-4aec-8e36-2defa669e6f5",
   "metadata": {},
   "source": [
    "## Question 7.d)\n",
    "\n",
    "Was there more **variability** from sample to sample when we took a\n",
    "sample size of 600 or when we took a sample size of 50? **Explain what\n",
    "evidence you have for assessing this**\n",
    "\n",
    "**Answer:**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "efe95f54-c65d-4dc8-a766-ec855b30c893",
   "metadata": {
    "tags": []
   },
   "source": [
    "There is more variablity in the sameple size of 50, becuase the SE of n600 is only .013 which is alot smaller, this number represents variation between proportions of samples. This big change in sample size resulted in more consistency an accruacy\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "171ae204-fb84-47f4-882c-7553517addd4",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "d9f50f9b-5878-4442-b57a-7181b469a9fa",
   "metadata": {},
   "source": [
    "## Question 8\n",
    "\n",
    "Which sampling distribution looked more normally distributed (bell\n",
    "shaped and symmetrical); the one built on n = 15, 50 or 600? **Why?**\n",
    "\n",
    "**Answer:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "eb5babb9-e9db-4b04-aadc-8e4392db90ef",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA0gAAANICAIAAAByhViMAAAACXBIWXMAABJ0AAASdAHeZh94\nAAAgAElEQVR4nOzde3xcdZ34/89cMkmbNElDS0sLpRTbcrGwBQREsEUFAS+osD8UBUHktl5Y\nF1gU/Sr3xS/ul9XdLwhY6IIuCIWKCCjgchEKClVXboXKraVQoDQtTZp0cpnfH2d3Hvmm6XTS\ndjLh0+fzjz6Sc87MvGdyZubVuaYKhUIAAODdL13tAQAA2DKEHQBAJIQdAEAkhB0AQCSEHQBA\nJIQdAEAkhB0AQCSEHQBAJLLVHmCL6ejouPXWWx988MFly5aFEMaNGzdp0qSDDjrogAMOGDly\nZLWn26Ajjzxy9erVd99994gRIza0pLp6eno+/OEP53K5e+65p7hwyIZc/4Rmz56dyWR++9vf\nVvR0Swww3CxZsuSqq6568skn16xZUygUrrvuup122qlCpzXEF/4wHGCwBrz60Nef/vSnm2++\nedGiRZ2dnePHj993330/8YlPbL/99v02W7Ro0dy5c5955pkQwu67737CCSdMnz59wCMsf0uI\nUyEKTzzxxI477lg8U5lMpvjz+9///mpPV8o222wTQkjukje0pLq6urpCCLW1tX0XbsKQhx12\n2KxZs9atWzeoU1//hJK/76COZHNmG25/jn7efPPNbbfdNoQwevTo6dOnT58+/fnnn6/cyW3x\nC3+we0Ul/voVNeDVh8S6deu+9KUvrX+vdMYZZ/Tb8uqrr87lciGEmpqa5IdcLnfttdeuf5zl\nbwmxiiHsVq1aNW7cuBDChz70oQceeGD16tWFQmHFihV333336aef/tGPfrTaA5ayfjccd9xx\nRx55ZEdHRxWn6mvAe6ZNGLK+vj6EMNjztf4JVeKuvcRsw+3P0c8///M/hxA+//nP9/T0DMHJ\nbfELf7B7hbCLyWc+85kQwtSpU3/2s58tW7astbX1ySefvPLKK+fOndt3s4cffjidTudyuTlz\n5nR1dXV1df3kJz+pqanJZDKPPfbYpm0JEYsh7ObMmRNCmDx58oB3D0Nzh7fJhvkDQoUtd8+0\naWG3viEOu2Hu9NNPDyFcddVVQ3Nywm6whN2GXH/99SGEnXfeeeXKlaW3nD17dgjhe9/7Xt+F\n5557bgjhkEMO2bQtIWKpQqGwiU/iDhvf/va3L7nkkqOOOmrevHkb3bitre2+++576KGHli5d\nunr16rFjxx544IHHHXdcQ0ND382KL+V59tlnf/KTnyxatKihoeGII474whe+kDzP+8gjj9xw\nww2vvPJKS0vLscce+7GPfWzAgz/11FNz5sx57rnnRowYMWvWrJNPPrnfS7XGjBnz9ttvr1mz\npjhAiVeVvfTSS1dfffWTTz6ZTqf333//008/ffTo0f3O4Jo1a66++uqHH344n89Pnz79y1/+\n8vTp08t/lU97e/vVV1/9u9/9bt26ddOnTz/ppJOmT59eU1NTW1vb2dlZ3Gz9IXt7e+fPn3/f\nffctXbo0lUpts802M2bMOPzww3fbbbdf/vKX/+f//J/f/e53vb29Bx10UDr932/Zue2221pa\nWvqewcWLF1977bVPP/30mjVrfvOb3+RyufVPKJVKZTKZ7u7u0pft8uXLP/vZz06aNCm5/yjK\n5/OHHnroiBEj7r777hDCRmcb8DV2PT09N9988z333PPaa6+NHDnyb/7mb774xS9Onjx5wH2g\nnL/agEqfyty5c+fOnfvcc88tX7582rRp2223XQjhkEMO+fa3v72hIyx/t9yQ4oW/0TO10Sva\nRi/50gNs9CyUeU0vsd/23WzBggW33nrr4sWLu7q6pkyZ8rd/+7dJQ/RT5tVnQ4Zgv9r83XJL\n2WOPPZ588smbb775b//2b0tstnz58gkTJiQ/JK86SCxbtmz77bfPZDKvv/762LFjB7UlRK7a\nZbkF/OAHPwgh7LTTTmvXrt3oxu973/uSMz5y5Mimpqbk5x122OGZZ57pu1kIIZPJzJs3r7a2\nNoSQ/BtC+OxnP1v4n/8CptPpmpqaZPn//t//e/2DX3/99TU1NSNHjkxuVkII06ZNW7JkSd8t\ny3mNXXJsd9xxR/LwRl1dXXKiO+200/Lly/se21//+tfktYbZbHaHHXYYMWJELpf7j//4j1De\nYwYvvvjilClT+h38pz/96foH7zdka2vrXnvtFUJIpVJjx44dP358cj89a9asQqFw++23z5o1\nK1ly0EEHzfofb7/9dr9LOzlryZbt7e0lLo2NXrYvvfRSCGH69On9zmNHR0cIob6+Pvl1o7Ot\nP8Crr776N3/zN8mfYMyYMcm+kcvlrrnmmr4nVP5fbUAbPZXrrrtu1qxZ48ePT857MvZFF11U\n4jjL3y1LH0M5Z2qjV7SNXvKbeRbKuaaX3m8Ta9eu/dznPpccPJfLFbvw+OOP7+7u7nuK5V99\nBjQ0+9VmHnxL+etf/5pcLJ2dnatXr543b94VV1xxyy23vPHGG/22/MUvfjHgFblQKOy8884h\nhDvvvHOwW0LcYgi7v/71r0lgzZw58+qrr37uued6e3s3tPE555xz0003rVixIvl12bJlp556\naghhzz337LtZclvf1NR08cUXr1y5sqen5z//8z+TBxJOPPHE5ubmn/3sZ+3t7evWrbv66qtT\nqVQul3v99df7Hbyuru773/9+8sLw5cuXf/zjHw8h7L///n3HKzPsUqlUY2Pjt7/97TfffLNQ\nKDz77LN77rlnCOG0004rbtbd3Z3cMRxzzDFvvfVWoVDo7Oy85JJLkjcFb/Supbu7O7mTO/ro\no5NT6ejoOO+885IHQkqH3Xe+850Qwsc//vFly5YlS7q6uh566KErr7yyeJAST7olZ7ChoeFb\n3/rW66+/3tvbu3jx4uRec0OXxkYv2zLDbqOz9Rugp6dn3333Te77//rXvyYX8g9/+MNMJpNK\npf7zP/+z35wb/asNqPxTOemkk0II/e77N6T83bL0MZRzpsq8om3CU7FlnoVyBihnv/385z8f\nQthvv/0effTRnp6e3t7exx9//L3vfW8I4YILLihuNqirz/qGZr/a/IN/97vfnVWe5Mg35Oc/\n/3lyi33dddf1fQy1pqbmzDPP7OrqKm552WWXhRCOOOKI9Y/kkEMOCSH8y7/8y2C3hLjFEHaF\nQuGmm27qe+swatSogw8++NJLL13//38DOvDAA0MIv//974tLkuM566yz+m523nnnJctvuumm\nvssPO+ywEMKcOXP6HfzYY4/tu1lbW9uYMWNCCHfffXdxYZlhF9Z7p9iCBQtCCOPHjy8umT9/\nfvKYRD6f77vlUUcdVc5dy+233x5C2H777fu9RfGTn/zkRsPuyCOPDCE88MADJY6/dNglD4Gs\nv2pDl8ZGL9sKhd0vf/nLEEJzc3Nra2vfzb7xjW+EED7wgQ/0m3Ojf7UBlX8qgw27MnfL0sew\naWeqMNAVbRPCbnPOQr8BNrrf/v73vw8hTJo0qd8f4oUXXhgxYkRjY2Nx8kFdfdY3NPvV5h88\nuTEpx9KlS0scz7/+67+GEFpaWlKp1N5773311Vfffvvt55xzTvI+1r/7u78rbpm8tOBzn/vc\n+kdy9NFHhxDOP//8wW4JcYvkA4qPOeaYl1566Qc/+MFHPvKRpqamNWvW3H///d/85jd33nnn\n5L+G/XR2dj711FMPP/zwAw888MADD0ycODGE8Kc//anfZieffHLfX/fee+8QQmNj4zHHHNN3\nefJf7RdeeKHfwb/yla/0/bW+vv7EE08MIdx1112bcB6Tl8kX7bffftlsdvny5UmphBB+/etf\nJzMXnyAecIwNSaY6+eSTk9vWoq9//esbPWzyTMdVV13V2tpazmkN6Gtf+1r5G2/Zy7Z8d955\nZwjhS1/6UnNzc9/lZ555ZghhwYIFq1at6rt8o3+1LXIqg7L5F135Z6rMK9pglX8WSg+w0f32\n5ptvDiEce+yx/f4QU6ZM2W+//d55552FCxcmSzbn6hOGar/a/IPPmzevzLuW9T+Irq/kFYcr\nV67cZ599FixYcPLJJ3/yk5+89NJLb7vtthDClVdeuWjRomTL7u7uEEI2O8BHriYLk7enDGpL\niFs8H1A8ZsyYM88888wzzywUCosXL/7Nb37zgx/8YMmSJV/4whd22WWX5LmGEMLzzz//j//4\nj3fdddf6V/KVK1f2/TWVSiWvmOl7EiGEfgtDCMkLcteuXdtv+S677NJvSfI5mcnrSwZl/WHS\n6XRLS8ubb765du3a5Ome5GinTZvW77BTp04t5ySSg29o5tLOPPPMG2+88cYbb5w3b96+++67\n7777HnzwwYceemjxtYnlWH/yErbgZTsoSb7vuuuu/ZZPnDixsbHxnXfeefHFF5On5EJ5f7XN\nP5XB2uhFd8UVV/TdmUePHp08Lpgo80yVf0WrxFkoc4CN7rdPPfVUCOEXv/jFo48+2u9IkvJ4\n7bXXkl835+oThmq/2iIH3yKSR2pDCN/61rf6pvDHPvaxffbZ54knnrjzzjuTCzN5JcmAxVl8\n9D35tfwtIW7xhF1RKpWaNm3atGnTjjvuuBkzZrz66qtz5sz50Y9+FEJ47bXXDjjggLfffvvo\no48+9NBDJ06cOGLEiFQqde21195www09PT19jyedTg/4n78NxUphvfcX93v/XQhh1KhR4X/+\ntzoofd+oUZRKpfqe7rp160IIjY2N/TYrvnK8tOTgyYR9rX+E65swYcJTTz11zTXX3HXXXY8/\n/vgjjzxy+eWXjxs37pprrvnEJz5RzqlnMplyTqhoC162g5Ic/4CjNjU1vfPOO30HKOevtvmn\nMlgbvei++93vvv3228W1O++8c9+wK+dMDeqKVomzUOYAG91v29vbwwYeBNpll1122WWX4gNs\n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\nQCSEHQBAJIQdAEAkhB0AQCSEHQBAJIQdAEAkhB0AQCSEHQBAJIQdAEAkhB0AQCSEHQBAJIQd\nAEAkhB0AQCSEHQBAJIQdAEAkhB0AQCSEHQBAJIQdAEAkhB0AQCSEHQBAJIQdAEAkstUeYHNl\nMplqj7DFpNPpEEIqlYrpTG2CVCqVTqe38gshxLUnJPs2w18mkxmee11MV4dNk1yJ3DaGuO73\nK+FdH3ajRo2q9ghbTCqVCiHU1NTEdKY2QTqdzmazdXV11R6kmtLpdKFQiGZPqK+vr/YIlKWh\noWF4XvVSqVQ0V4dNk9xB1NbW1tTUVHuWaspkMvX19YVCodqDVFOyM2zIuz7sVq1aVe0Rtphs\nNtvc3JzP59va2qo9SzU1NDTk8/l8Pl/tQaqppaWlUChEs3uvWbOm2iNQltWrV3d2dlZ7igGM\nHj06mqvDpsnlco2NjR0dHR0dHdWepZqampra2tp6enqqPUg1tbS0lGg7z48AAERC2AEARELY\nAQBEQtgBAERC2AEARELYAQBEQtgBAERC2AEARELYAQBEQtgBAERC2AEARELYAQBEQtgBAERC\n2AEARELYAQBEQtgBAERC2AEARELYAQBEQtgBAERC2AEARELYAQBEQtgBAERC2AEARELYAQBE\nQtgBAERC2AEARELYAQBEQtgBAERC2AEARELYAQBEQtgBAERC2AEARELYAQBEQtgBAERC2AEA\nRELYAQBEQtgBAERC2AEARELYAQBEQtgBAERC2AEARELYAQBEQtgBAERC2AEARELYAQBEQtgB\nAERC2AEARELYAQBEQtgBAERC2AEARELYAQBEQtgBAERC2AEARELYAQBEQtgBAERC2AEARELY\nAQBEQtgBAERC2AEARELYAQBEQtgBAERC2AEARELYAQBEQtgBAERC2AEARCI7BKexfPny+++/\nf9y4cR/60IeKC9vb2x977LHW1tbttttuv/32y2az5awCAGBDKt5M+Xz+0ksvXb58+dSpU4th\nt2zZsnPPPbe2tnbKlCm33377Lbfccskll4wcObL0KgAASqh42F1zzTU77bRTS0tLV1dXceFV\nV13V2Nh42WWX1dXVrVix4owzzrj55ptPOOGE0qsAACihsq+xu//++5955pnTTjut78I1a9b8\n13/912GHHVZXVxdCGDNmzIEHHvjQQw+VXgUAQGkVfMRuyZIlc+bMufjii2tra/suX7ZsWaFQ\nmDRpUnHJDjvscPfdd3d2dpZYlaReCGHRokWvvvpq8nM6nX7f+95XubMwxDKZTAghnU73u8S2\nNplMpqamJpVKVXuQakrOfjR7Qk1NTbVHoCy5XG547nWpVGp4DjZkkpebZ7PZrfxySKfTuVyu\nt7e32oMMX5UKu87OzksvvfS4447bcccd118VQqivry8uSX7u6OgosaoYdvPnz7/11luTn3O5\n3IIFCyp0Fqoll8vlcrlqT1FlOiCEkEqlRo0aVe0ptoy+V2qGs1GjRhVvbIebaK4Om6O2tnYr\nD7vg9mRjKhV2t99++5o1a1atWvXzn/88hPD666/39PT8/Oc/P/jgg5Nbjfb29uLGyc8jRowo\nsaq45LDDDps+fXrycyaTaWtrq9BZGHrpdHrkyJFdXV3r1q2r9izVVFtb29PT093dXe1Bqqm+\nvr5QKKxdu7bag2wZ0ZyR6LW1tQ3Pq97IkSO38r0om83W1dXl8/l8Pl/tWappxIgR69at28of\nsauvry/xpFalwm7cuHG77777Sy+9lPy6du3a3t7el156af/99584cWIqlVqyZMmMGTOStUuX\nLh0zZkxdXV2JVcVjnjlz5syZM4u/rlixokJnYehls9mRI0f29PQkj1xutbLZrBuvkSNHFgqF\naPaErfyv+S4ybP9XOWLEiGiuDpsml8vV1dV1dXVt5ZdDbW3tunXrenp6qj1INY0cObIKYTd7\n9uzZs2cXf73gggu6urq++c1vJr/uueeev/nNbz784Q8nb319+OGHP/KRj4QQRo0ataFVAACU\nVp3P/j311FPPPffcr3/961OmTHn66afHjh17zDHHbHQVAAAlDFHYzZo1q+8DpxMnTrziiise\nffTR1tbWAw88cP/99y9+vUSJVbAhP//5z5944olqT7ElJa+PHrbPiw3WypUrqz0CwFZh6MKu\n35L6+voNPcdaYhUM6OGHH77pppuqPQUAVJkHw4jHoT84q2HC2GpPwQBefewvf/jRz6o9BUD8\nhB3xaN5pYvPkidWeggGsfuX1ao8AsFWo7FeKAQAwZIQdAEAkhB0AQCSEHQBAJIQdAEAkhB0A\nQCSEHQBAJIQdAEAkhB0AQCSEHQBAJIQdAEAkhB0AQCSEHQBAJIQdAEAkhB0AQCSEHQBAJIQd\nAEAkhB0AQCSEHQBAJIQdAEAkhB0AQCSEHQBAJIQdAEAkhB0AQCSEHQBAJIQdAH9ClWAAACAA\nSURBVEAkhB0AQCSEHQBAJIQdAEAkhB0AQCSEHQBAJIQdAEAkhB0AQCSEHQBAJIQdAEAkhB0A\nQCSEHQBAJIQdAEAkhB0AQCSEHQBAJIQdAEAkhB0AQCSEHQBAJIQdAEAkhB0AQCSEHQBAJIQd\nAEAkhB0AQCSEHQBAJIQdAEAkhB0AQCSEHQBAJIQdAEAkhB0AQCSEHQBAJIQdAEAkhB0AQCSE\nHQBAJIQdAEAkhB0AQCSEHQBAJIQdAEAkhB0AQCSy1R5gczU1NVV7hC0mlUqFEHK5XExnahNk\nMplsNjtixIjyD1JTU1O5eWDr0djYWFdXV+0pBpBOp7fyG8Z0Oh1CqKury+Vy1Z6lmrLZ7KhR\nowqFQrUHqaakFjbkXR92bW1t1R5hi8lkMo2NjV1dXWvXrq32LNU0cuTIrq6urq6u8g/S3d1d\nuXlg69He3j48r01NTU0x3dpvgpqamoaGhnw+39nZWe1ZqqmhoaGjo6Onp6fag1RTU1NTibZ7\n14ddTH/d5O9UKBRiOlOboFAo9Pb2DupC2Mr/9wZbSk9Pz/C8/XHDmMlkQgiDvW2M0rDdS4cJ\nr7EDAIiEsAMAiISwAwCIhLADAIiEsAMAiISwAwCIhLADAIiEsAMAiISwAwCIhLADAIiEsAMA\niISwAwCIhLADAIiEsAMAiISwAwCIhLADAIiEsAMAiISwAwCIhLADAIiEsAMAiISwAwCIhLAD\nAIiEsAMAiISwAwCIhLADAIiEsAMAiISwAwCIhLADAIiEsAMAiISwAwCIhLADAIiEsAMAiISw\nAwCIhLADAIiEsAMAiISwAwCIhLADAIiEsAMAiISwAwCIhLADAIiEsAMAiISwAwCIhLADAIiE\nsAMAiISwAwCIhLADAIiEsAMAiISwAwCIhLADAIiEsAMAiISwAwCIhLADAIiEsAMAiISwAwCI\nhLADAIiEsAMAiISwAwCIhLADAIiEsAMAiISwAwCIhLADAIiEsAMAiISwAwCIhLADAIiEsAMA\niES2ckf905/+9NFHH33rrbdCCBMmTPj4xz/+kY98pLj2tttuu+uuu1auXDlhwoTPfvazBx54\nYDmrAADYkAqGXUNDwzHHHLPtttv29PQ89thjP/rRj3K53Ac/+MEQwvz582+44YZTTjllt912\ne/DBBy+77LL6+vqZM2eWXgUAQAkVDLtPfepTxZ933333J5544sknn/zgBz/Y29t72223HXro\n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\nNAwAAJuurNfYPffcc2vWrOm7pL29/Yknnrj44ovHjRs3Y8aMyswGAMAglBV2p556avJdsf3s\nsMMOc+fOramp2dJTAQAwaGWF3Ve/+tVPfepTfZc0NDRMnjz5oIMO6vsxKAAAVFFZYXf00UdX\neg4AADZTWWFXlM/nX3jhhY6OjgkTJowfP75CMwEAsAnKfVfs6tWrTzvttObm5t12223vvffe\nbrvt9thjjzvvvLOiwwEAUL6yHrFbt27dhz/84YULF06dOvX9739/U1PTiy++eM8993ziE5+4\n+eabPVELADAclBV2//7v/75w4cILL7zw3HPPTaf/+0G+l1566cMf/vA3vvGNo446ykfZAQBU\nXVlPxd53330zZ878zne+U6y6EMJOO+10+eWXv/rqq4sWLarYeAAAlKussFu1atXUqVPXX54s\nXLVq1RYeCgCAwSsr7CZMmPDEE090dXX1W75gwYJk7ZafCwCAQSor7D7zmc+8+OKLxx133PLl\ny4sLf/GLX5x55pkzZ87ccccdKzYeAADlKuvNE5/85CePO+64G264Yf78+TvttFNjY+PLL7/8\n1ltvNTU1/eQnP6n0iAAAlKPcz7H793//97lz5+6///5vvvnmk08+OWrUqFNPPfXPf/7zXnvt\nVdH5AAAoU7nfPJFKpb74xS9+8YtfrOg0AABssnIfsQMAYJgrK+zuueee0aNHv/DCC/2Wf/nL\nXz7kkEMqMBUAAINWVtjdcccdU6ZM2Xnnnfst/9jHPvbb3/727bffrsBgAAAMTllh99JLLw34\nAcW77LJLoVBYsmTJlp4KAIBBKyvsent733nnnfWXJwvX/+BiAACGXllht8suu/z+979fuXJl\nv+V33nlnOp1+z3veU4HBAAAYnLLC7vOf//zKlSuPOeaYV155JVnS29t77bXXXnrppUcccURL\nS0slJwQAoCxlfY7d3nvv/d3vfveCCy54z3veM3ny5Obm5hdeeKG1tXXSpElXXnllpUcEAKAc\n5X6O3fnnn/+LX/xi9uzZK1eufPrpp8eOHXvmmWcuXLhw++23r+h8AACUqdxvngghHHnkkUce\neWTlRgEAYHP45gkAgEgIOwCASAg7AIBICDsAgEgIOwCASAg7AIBICDsAgEgIOwCASAg7AIBI\nCDsAgEgIOwCASAg7AIBICDsAgEgIOwCASAg7AIBICDsAgEgIOwCASAg7AIBICDsAgEgIOwCA\n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\nAyAUentDCHUTxqSqPQkDyrd3tC1fkc/nqz0Iw52wA+C/feanl2ZyNdWeggG8fP8f7jnrB9We\ngncBr7EDAIiEsAMAiISwAwCIhLADAIiEsAMAiISwAwCIhLADAIiEsAMAiISwAwCIhLADAIiE\nsAMAiISwAwCIhLADAIiEsAMAiISwAwCIhLADAIiEsAMAiISwAwCIhLADAIiEsAMAiISwAwCI\nhLADAIiEsAMAiISwAwCIhLADAIiEsAMAiISwAwCIhLADAIiEsAMAiISwAwCIhLADAIiEsAMA\niISwAwCIhLADAIiEsAMAiISwAwCIhLADAIiEsAMAiES22gO8CxQKhbfeemsITiibzXZ2dq5b\nt669vX0ITm7Yam9vz+fzXV1d5R+ko6OjcvMAwLvFuz7sRo0aVemTWLVq1e67717pUwGA0rLZ\n7BDc6w1nmUymvr6+UChUe5BqSqVSJda+68Ous7Oz0iexbt26EMKIlqZxe0yr9GmxaV79/V+6\nO9ZVewqAyurt7R2Ce73hLJPJrFu3rre3t9qDVFNNTU2JtnvXh92gnrDbnJPYZvrkQ//57Eqf\nFpvmpiO/9s6rb1R7CoDK6u3tHYJ7veGsUCh0d3f39PRUe5Dhy5snAAAiIewAACIh7AAAIiHs\nAAAiIewAACIh7AAAIiHsAAAiIewAACIh7AAAIiHsAAAiIewAACIh7AAAIiHsAAAiIewAACIh\n7AAAIiHsAAAiIewAACIh7AAAIiHsAAAiIewAACIh7AAAIiHsAAAiIewAACIh7AAAIiHsAAAi\nIewAACIh7AAAIiHsAAAiIewAACIh7AAAIiHsAAAiIewAACIh7AAAIiHsAAAiIewAACIh7AAA\nIiHsAAAiIewAACIh7AAAIiHsAAAiIewAACIh7AAAIiHsAAAiIewAACIh7AAAIiHsAAAiIewA\nACIh7AAAIiHsAAAiIewAACIh7AAAIiHsAAAiIewAACIh7AAAIiHsAAAiIewAACIh7AAAIiHs\nAAAiIewAACIh7AAAIiHsAAAiIewAACIh7AAAIpGt9gAAwEasXvJ6COHGG2987LHHqj1LNWWz\n2Z6enkKhUO1BBtbc3PzDH/6wujMIOwAY7ta90xZCePbZZ5999tlqz8IGbbvtttUeYViG3W23\n3XbXXXetXLlywoQJn/3sZw888MBqTwQA1TfzpM/s/v99tNpTMLD5x32r2iOEMAzDbv78+Tfc\n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\nRK5CYII=",
      "text/plain": [
       "plot without title"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 420,
       "width": 420
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ggplot(p_hat_n600_1000rep, aes(x = p_hat)) +\n",
    "  geom_histogram(binwidth = 0.02, color = \"black\", fill = \"aquamarine3\", boundary=0) +\n",
    "  labs(x = \"Sample proportion of divorced respondents\", \n",
    "       title = \"Sampling distribution of p-hat based on n = 600\") "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "797931c6-366c-4b05-94c0-baa2bd51fb2b",
   "metadata": {},
   "outputs": [],
   "source": [
    "The sample size n600 would have the most bell-shaped curve because it’s large enough for the Central Limit Theorem to fully apply and making the distribution of \n",
    "p^ approximately normal. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24f5fcaa-58bc-4750-9d4a-d78bb9a32081",
   "metadata": {},
   "source": [
    "## Estimating $\\hat{p}$ and the standard error of $\\hat{p}$ from a single sample (revisited)\n",
    "\n",
    "In most instances, we do not have access to the full population as we\n",
    "did in this GSS data; instead we have to take a **sample** to try to say\n",
    "something about the **larger population**. Furthermore, in the real\n",
    "world, we typically only take a **single** sample from the population,\n",
    "due to time or money constraints.\n",
    "\n",
    "So how do we **ESTIMATE** a $\\hat{p}$ and a standard error of $\\hat{p}$\n",
    "when we only have a single sample, and not 1000 repeated samples? As\n",
    "demonstrated at the very beginning of the Problem Set we:\n",
    "\n",
    "-   estimate $\\hat{p}$ from the sample\n",
    "-   use the formula for the standard error of $\\hat{p}$ below, to\n",
    "    estimate SE based on a single sample\n",
    "\n",
    "$$\\widehat{SE}_{\\hat{p}}  \\approx  \\sqrt{\\frac{\\hat{p} \\times (1-\\hat{p})}{n}}$$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a8d3eafa-e937-4eaa-8ae9-aa5789941e73",
   "metadata": {},
   "source": [
    "## Question 9\n",
    "\n",
    "Imagined we collected only a single small sample of 15 respondents like\n",
    "so:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "eb3351fa-86cb-4d7d-8dec-410024102121",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "set.seed(53)\n",
    "\n",
    "n50_1rep = gss_14 |> \n",
    "  rep_sample_n(size = 50, reps = 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "625d66b9-9b5c-4078-93e0-7bcf622e2c17",
   "metadata": {},
   "source": [
    "Following the example from the beginning of the Problem Set (roughly\n",
    "line 140), estimate\n",
    "\n",
    "1.  The sample proportion $\\hat{p}$ of people who identified as\n",
    "    `Divorced` based on `n15_1rep`.\n",
    "2.  The standard error of $\\hat{p}$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "83931434-b9d8-4ea4-8f69-fc23d67c7586",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"dataframe\">\n",
       "<caption>A tibble: 1 × 2</caption>\n",
       "<thead>\n",
       "\t<tr><th scope=col>M_p_hat</th><th scope=col>SE_p_hat</th></tr>\n",
       "\t<tr><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><td>0.18</td><td>0.09919677</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A tibble: 1 × 2\n",
       "\\begin{tabular}{ll}\n",
       " M\\_p\\_hat & SE\\_p\\_hat\\\\\n",
       " <dbl> & <dbl>\\\\\n",
       "\\hline\n",
       "\t 0.18 & 0.09919677\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A tibble: 1 × 2\n",
       "\n",
       "| M_p_hat &lt;dbl&gt; | SE_p_hat &lt;dbl&gt; |\n",
       "|---|---|\n",
       "| 0.18 | 0.09919677 |\n",
       "\n"
      ],
      "text/plain": [
       "  M_p_hat SE_p_hat  \n",
       "1 0.18    0.09919677"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "p_hat_n50_1rep = n50_1rep |>\n",
    "  summarize(p_hat = mean(marital == \"Divorced\")) |>  \n",
    "  mutate(SE_p_hat = ifelse(p_hat == 0 | p_hat == 1, 0, sqrt(p_hat * (1 - p_hat) / 15))) \n",
    "\n",
    "p_hat_n50_1rep |>\n",
    "  summarize(M_p_hat = mean(p_hat), \n",
    "            SE_p_hat = mean(SE_p_hat))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e0bd2bc3-e824-4d4f-be68-0593bc47a0ac",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true,
    "tags": []
   },
   "source": [
    "> You should get a value reasonably close to the estimate we made\n",
    "> earlier from our simulated sampling distribution for n = 15! Note that\n",
    "> when you must estimate a standard error from **only a single sample**,\n",
    "> the formula **contains the sample size, n**. The larger the sample\n",
    "> size n, the larger the number in the denominator of the SE formula.\n",
    "\n",
    "## Question 10\n",
    "\n",
    "Fill in the R Markdown table below with all the standard errors you\n",
    "computed for this problem set. In other words:\n",
    "\n",
    "1.  Replace `x` with the standard error you obtained by taking the\n",
    "    standard deviation of the n = 15 sampling distribution\n",
    "2.  Replace `a` with the standard error you obtained for the single\n",
    "    sample of n = 15 you obtained and using the mathematical formula\n",
    "3.  etc., etc.\n",
    "\n",
    "When you are done, make sure all the `|` in the table still line up so\n",
    "your results print out in a table!\n",
    "\n",
    "| Sample size n | SE via sd of sampling distribution | SE via the one sample you obtained and formula |\n",
    "|-----------------|---------------------------------------|-----------------|\n",
    "| 15            | 0.052                                  | 0.114                                            |\n",
    "| 50            | 0.094                                  | 0.099                                            |"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "542269f6-f0bd-4921-b071-39c410912f5f",
   "metadata": {},
   "source": [
    "## Question 11\n",
    "\n",
    "Based on what you observed for Question 10, **IF** you collected a\n",
    "single sample from 600 respondents, do you think the standard error will\n",
    "be smaller or larger than the one you calculated for n = 15. **Explain\n",
    "your reasoning** (Note: if you are not sure you can collect a sample and\n",
    "calculate the standard error)\n",
    "\n",
    "**Answer:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f536bea4-0b04-4f02-93fc-2caa5aa9e52e",
   "metadata": {},
   "outputs": [],
   "source": [
    "standard error will be smaller, becasue of the larger number of samples means the percentage of errors decrease and variation between samples become smaller.\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".conda-data730-lecture:R",
   "language": "R",
   "name": "conda-env-.conda-data730-lecture-r"
  },
  "language_info": {
   "codemirror_mode": "r",
   "file_extension": ".r",
   "mimetype": "text/x-r-source",
   "name": "R",
   "pygments_lexer": "r",
   "version": "4.3.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
